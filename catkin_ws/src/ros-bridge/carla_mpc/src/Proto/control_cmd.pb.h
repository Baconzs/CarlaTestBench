// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_cmd.proto

#ifndef PROTOBUF_INCLUDED_control_5fcmd_2eproto
#define PROTOBUF_INCLUDED_control_5fcmd_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_control_5fcmd_2eproto 

namespace protobuf_control_5fcmd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_control_5fcmd_2eproto
namespace controller {
class ControlCommand;
class ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
class LatencySts;
class LatencyStsDefaultTypeInternal;
extern LatencyStsDefaultTypeInternal _LatencySts_default_instance_;
class SimpleMPCDebug;
class SimpleMPCDebugDefaultTypeInternal;
extern SimpleMPCDebugDefaultTypeInternal _SimpleMPCDebug_default_instance_;
}  // namespace controller
namespace google {
namespace protobuf {
template<> ::controller::ControlCommand* Arena::CreateMaybeMessage<::controller::ControlCommand>(Arena*);
template<> ::controller::LatencySts* Arena::CreateMaybeMessage<::controller::LatencySts>(Arena*);
template<> ::controller::SimpleMPCDebug* Arena::CreateMaybeMessage<::controller::SimpleMPCDebug>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace controller {

// ===================================================================

class LatencySts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.LatencySts) */ {
 public:
  LatencySts();
  virtual ~LatencySts();

  LatencySts(const LatencySts& from);

  inline LatencySts& operator=(const LatencySts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencySts(LatencySts&& from) noexcept
    : LatencySts() {
    *this = ::std::move(from);
  }

  inline LatencySts& operator=(LatencySts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencySts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencySts* internal_default_instance() {
    return reinterpret_cast<const LatencySts*>(
               &_LatencySts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LatencySts* other);
  friend void swap(LatencySts& a, LatencySts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencySts* New() const final {
    return CreateMaybeMessage<LatencySts>(NULL);
  }

  LatencySts* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LatencySts>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LatencySts& from);
  void MergeFrom(const LatencySts& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencySts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double total_time_ms = 1;
  void clear_total_time_ms();
  static const int kTotalTimeMsFieldNumber = 1;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  // double controller_time_ms = 2;
  void clear_controller_time_ms();
  static const int kControllerTimeMsFieldNumber = 2;
  double controller_time_ms() const;
  void set_controller_time_ms(double value);

  // @@protoc_insertion_point(class_scope:controller.LatencySts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double total_time_ms_;
  double controller_time_ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_control_5fcmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleMPCDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.SimpleMPCDebug) */ {
 public:
  SimpleMPCDebug();
  virtual ~SimpleMPCDebug();

  SimpleMPCDebug(const SimpleMPCDebug& from);

  inline SimpleMPCDebug& operator=(const SimpleMPCDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleMPCDebug(SimpleMPCDebug&& from) noexcept
    : SimpleMPCDebug() {
    *this = ::std::move(from);
  }

  inline SimpleMPCDebug& operator=(SimpleMPCDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleMPCDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleMPCDebug* internal_default_instance() {
    return reinterpret_cast<const SimpleMPCDebug*>(
               &_SimpleMPCDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SimpleMPCDebug* other);
  friend void swap(SimpleMPCDebug& a, SimpleMPCDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleMPCDebug* New() const final {
    return CreateMaybeMessage<SimpleMPCDebug>(NULL);
  }

  SimpleMPCDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleMPCDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleMPCDebug& from);
  void MergeFrom(const SimpleMPCDebug& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleMPCDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lateral_error = 1;
  void clear_lateral_error();
  static const int kLateralErrorFieldNumber = 1;
  double lateral_error() const;
  void set_lateral_error(double value);

  // double ref_heading = 2;
  void clear_ref_heading();
  static const int kRefHeadingFieldNumber = 2;
  double ref_heading() const;
  void set_ref_heading(double value);

  // double heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // double heading_error = 4;
  void clear_heading_error();
  static const int kHeadingErrorFieldNumber = 4;
  double heading_error() const;
  void set_heading_error(double value);

  // double heading_error_rate = 5;
  void clear_heading_error_rate();
  static const int kHeadingErrorRateFieldNumber = 5;
  double heading_error_rate() const;
  void set_heading_error_rate(double value);

  // double lateral_error_rate = 6;
  void clear_lateral_error_rate();
  static const int kLateralErrorRateFieldNumber = 6;
  double lateral_error_rate() const;
  void set_lateral_error_rate(double value);

  // double curvature = 7;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 7;
  double curvature() const;
  void set_curvature(double value);

  // double steer_angle = 8;
  void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 8;
  double steer_angle() const;
  void set_steer_angle(double value);

  // double steer_angle_feedforward = 9;
  void clear_steer_angle_feedforward();
  static const int kSteerAngleFeedforwardFieldNumber = 9;
  double steer_angle_feedforward() const;
  void set_steer_angle_feedforward(double value);

  // double steer_angle_lateral_contribution = 10;
  void clear_steer_angle_lateral_contribution();
  static const int kSteerAngleLateralContributionFieldNumber = 10;
  double steer_angle_lateral_contribution() const;
  void set_steer_angle_lateral_contribution(double value);

  // double steer_angle_lateral_rate_contribution = 11;
  void clear_steer_angle_lateral_rate_contribution();
  static const int kSteerAngleLateralRateContributionFieldNumber = 11;
  double steer_angle_lateral_rate_contribution() const;
  void set_steer_angle_lateral_rate_contribution(double value);

  // double steer_angle_heading_contribution = 12;
  void clear_steer_angle_heading_contribution();
  static const int kSteerAngleHeadingContributionFieldNumber = 12;
  double steer_angle_heading_contribution() const;
  void set_steer_angle_heading_contribution(double value);

  // double steer_angle_heading_rate_contribution = 13;
  void clear_steer_angle_heading_rate_contribution();
  static const int kSteerAngleHeadingRateContributionFieldNumber = 13;
  double steer_angle_heading_rate_contribution() const;
  void set_steer_angle_heading_rate_contribution(double value);

  // double steer_angle_feedback = 14;
  void clear_steer_angle_feedback();
  static const int kSteerAngleFeedbackFieldNumber = 14;
  double steer_angle_feedback() const;
  void set_steer_angle_feedback(double value);

  // double steering_position = 15;
  void clear_steering_position();
  static const int kSteeringPositionFieldNumber = 15;
  double steering_position() const;
  void set_steering_position(double value);

  // double ref_speed = 16;
  void clear_ref_speed();
  static const int kRefSpeedFieldNumber = 16;
  double ref_speed() const;
  void set_ref_speed(double value);

  // double steer_angle_limited = 17;
  void clear_steer_angle_limited();
  static const int kSteerAngleLimitedFieldNumber = 17;
  double steer_angle_limited() const;
  void set_steer_angle_limited(double value);

  // double station_reference = 18;
  void clear_station_reference();
  static const int kStationReferenceFieldNumber = 18;
  double station_reference() const;
  void set_station_reference(double value);

  // double station_error = 19;
  void clear_station_error();
  static const int kStationErrorFieldNumber = 19;
  double station_error() const;
  void set_station_error(double value);

  // double speed_reference = 20;
  void clear_speed_reference();
  static const int kSpeedReferenceFieldNumber = 20;
  double speed_reference() const;
  void set_speed_reference(double value);

  // double speed_error = 21;
  void clear_speed_error();
  static const int kSpeedErrorFieldNumber = 21;
  double speed_error() const;
  void set_speed_error(double value);

  // double acceleration_reference = 22;
  void clear_acceleration_reference();
  static const int kAccelerationReferenceFieldNumber = 22;
  double acceleration_reference() const;
  void set_acceleration_reference(double value);

  // double station_feedback = 24;
  void clear_station_feedback();
  static const int kStationFeedbackFieldNumber = 24;
  double station_feedback() const;
  void set_station_feedback(double value);

  // double speed_feedback = 25;
  void clear_speed_feedback();
  static const int kSpeedFeedbackFieldNumber = 25;
  double speed_feedback() const;
  void set_speed_feedback(double value);

  // double acceleration_cmd_closeloop = 26;
  void clear_acceleration_cmd_closeloop();
  static const int kAccelerationCmdCloseloopFieldNumber = 26;
  double acceleration_cmd_closeloop() const;
  void set_acceleration_cmd_closeloop(double value);

  // double acceleration_cmd = 27;
  void clear_acceleration_cmd();
  static const int kAccelerationCmdFieldNumber = 27;
  double acceleration_cmd() const;
  void set_acceleration_cmd(double value);

  // double acceleration_lookup = 28;
  void clear_acceleration_lookup();
  static const int kAccelerationLookupFieldNumber = 28;
  double acceleration_lookup() const;
  void set_acceleration_lookup(double value);

  // double speed_lookup = 29;
  void clear_speed_lookup();
  static const int kSpeedLookupFieldNumber = 29;
  double speed_lookup() const;
  void set_speed_lookup(double value);

  // double calibration_value = 30;
  void clear_calibration_value();
  static const int kCalibrationValueFieldNumber = 30;
  double calibration_value() const;
  void set_calibration_value(double value);

  // double steer_unconstrained_control_diff = 31;
  void clear_steer_unconstrained_control_diff();
  static const int kSteerUnconstrainedControlDiffFieldNumber = 31;
  double steer_unconstrained_control_diff() const;
  void set_steer_unconstrained_control_diff(double value);

  // double steer_angle_feedforward_compensation = 32;
  void clear_steer_angle_feedforward_compensation();
  static const int kSteerAngleFeedforwardCompensationFieldNumber = 32;
  double steer_angle_feedforward_compensation() const;
  void set_steer_angle_feedforward_compensation(double value);

  // double matrix_q_updated = 33;
  void clear_matrix_q_updated();
  static const int kMatrixQUpdatedFieldNumber = 33;
  double matrix_q_updated() const;
  void set_matrix_q_updated(double value);

  // double matrix_r_updated = 34;
  void clear_matrix_r_updated();
  static const int kMatrixRUpdatedFieldNumber = 34;
  double matrix_r_updated() const;
  void set_matrix_r_updated(double value);

  // double lateral_acceleration = 35;
  void clear_lateral_acceleration();
  static const int kLateralAccelerationFieldNumber = 35;
  double lateral_acceleration() const;
  void set_lateral_acceleration(double value);

  // double lateral_jerk = 36;
  void clear_lateral_jerk();
  static const int kLateralJerkFieldNumber = 36;
  double lateral_jerk() const;
  void set_lateral_jerk(double value);

  // double ref_heading_rate = 37;
  void clear_ref_heading_rate();
  static const int kRefHeadingRateFieldNumber = 37;
  double ref_heading_rate() const;
  void set_ref_heading_rate(double value);

  // double heading_rate = 38;
  void clear_heading_rate();
  static const int kHeadingRateFieldNumber = 38;
  double heading_rate() const;
  void set_heading_rate(double value);

  // double ref_heading_acceleration = 39;
  void clear_ref_heading_acceleration();
  static const int kRefHeadingAccelerationFieldNumber = 39;
  double ref_heading_acceleration() const;
  void set_ref_heading_acceleration(double value);

  // double heading_acceleration = 40;
  void clear_heading_acceleration();
  static const int kHeadingAccelerationFieldNumber = 40;
  double heading_acceleration() const;
  void set_heading_acceleration(double value);

  // double heading_error_acceleration = 41;
  void clear_heading_error_acceleration();
  static const int kHeadingErrorAccelerationFieldNumber = 41;
  double heading_error_acceleration() const;
  void set_heading_error_acceleration(double value);

  // double ref_heading_jerk = 42;
  void clear_ref_heading_jerk();
  static const int kRefHeadingJerkFieldNumber = 42;
  double ref_heading_jerk() const;
  void set_ref_heading_jerk(double value);

  // double heading_jerk = 43;
  void clear_heading_jerk();
  static const int kHeadingJerkFieldNumber = 43;
  double heading_jerk() const;
  void set_heading_jerk(double value);

  // double heading_error_jerk = 44;
  void clear_heading_error_jerk();
  static const int kHeadingErrorJerkFieldNumber = 44;
  double heading_error_jerk() const;
  void set_heading_error_jerk(double value);

  // double acceleration_feedback = 45;
  void clear_acceleration_feedback();
  static const int kAccelerationFeedbackFieldNumber = 45;
  double acceleration_feedback() const;
  void set_acceleration_feedback(double value);

  // double acceleration_error = 46;
  void clear_acceleration_error();
  static const int kAccelerationErrorFieldNumber = 46;
  double acceleration_error() const;
  void set_acceleration_error(double value);

  // double jerk_reference = 47;
  void clear_jerk_reference();
  static const int kJerkReferenceFieldNumber = 47;
  double jerk_reference() const;
  void set_jerk_reference(double value);

  // double jerk_feedback = 48;
  void clear_jerk_feedback();
  static const int kJerkFeedbackFieldNumber = 48;
  double jerk_feedback() const;
  void set_jerk_feedback(double value);

  // double jerk_error = 49;
  void clear_jerk_error();
  static const int kJerkErrorFieldNumber = 49;
  double jerk_error() const;
  void set_jerk_error(double value);

  // bool is_full_stop = 23;
  void clear_is_full_stop();
  static const int kIsFullStopFieldNumber = 23;
  bool is_full_stop() const;
  void set_is_full_stop(bool value);

  // @@protoc_insertion_point(class_scope:controller.SimpleMPCDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lateral_error_;
  double ref_heading_;
  double heading_;
  double heading_error_;
  double heading_error_rate_;
  double lateral_error_rate_;
  double curvature_;
  double steer_angle_;
  double steer_angle_feedforward_;
  double steer_angle_lateral_contribution_;
  double steer_angle_lateral_rate_contribution_;
  double steer_angle_heading_contribution_;
  double steer_angle_heading_rate_contribution_;
  double steer_angle_feedback_;
  double steering_position_;
  double ref_speed_;
  double steer_angle_limited_;
  double station_reference_;
  double station_error_;
  double speed_reference_;
  double speed_error_;
  double acceleration_reference_;
  double station_feedback_;
  double speed_feedback_;
  double acceleration_cmd_closeloop_;
  double acceleration_cmd_;
  double acceleration_lookup_;
  double speed_lookup_;
  double calibration_value_;
  double steer_unconstrained_control_diff_;
  double steer_angle_feedforward_compensation_;
  double matrix_q_updated_;
  double matrix_r_updated_;
  double lateral_acceleration_;
  double lateral_jerk_;
  double ref_heading_rate_;
  double heading_rate_;
  double ref_heading_acceleration_;
  double heading_acceleration_;
  double heading_error_acceleration_;
  double ref_heading_jerk_;
  double heading_jerk_;
  double heading_error_jerk_;
  double acceleration_feedback_;
  double acceleration_error_;
  double jerk_reference_;
  double jerk_feedback_;
  double jerk_error_;
  bool is_full_stop_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_control_5fcmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:controller.ControlCommand) */ {
 public:
  ControlCommand();
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlCommand(ControlCommand&& from) noexcept
    : ControlCommand() {
    *this = ::std::move(from);
  }

  inline ControlCommand& operator=(ControlCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ControlCommand* other);
  friend void swap(ControlCommand& a, ControlCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const final {
    return CreateMaybeMessage<ControlCommand>(NULL);
  }

  ControlCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .controller.SimpleMPCDebug debug = 6;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 6;
  private:
  const ::controller::SimpleMPCDebug& _internal_debug() const;
  public:
  const ::controller::SimpleMPCDebug& debug() const;
  ::controller::SimpleMPCDebug* release_debug();
  ::controller::SimpleMPCDebug* mutable_debug();
  void set_allocated_debug(::controller::SimpleMPCDebug* debug);

  // .controller.LatencySts latencysts = 7;
  bool has_latencysts() const;
  void clear_latencysts();
  static const int kLatencystsFieldNumber = 7;
  private:
  const ::controller::LatencySts& _internal_latencysts() const;
  public:
  const ::controller::LatencySts& latencysts() const;
  ::controller::LatencySts* release_latencysts();
  ::controller::LatencySts* mutable_latencysts();
  void set_allocated_latencysts(::controller::LatencySts* latencysts);

  // double throttle = 1;
  void clear_throttle();
  static const int kThrottleFieldNumber = 1;
  double throttle() const;
  void set_throttle(double value);

  // double brake = 2;
  void clear_brake();
  static const int kBrakeFieldNumber = 2;
  double brake() const;
  void set_brake(double value);

  // double steering_target = 3;
  void clear_steering_target();
  static const int kSteeringTargetFieldNumber = 3;
  double steering_target() const;
  void set_steering_target(double value);

  // double acceleration_target = 4;
  void clear_acceleration_target();
  static const int kAccelerationTargetFieldNumber = 4;
  double acceleration_target() const;
  void set_acceleration_target(double value);

  // double speed_target = 5;
  void clear_speed_target();
  static const int kSpeedTargetFieldNumber = 5;
  double speed_target() const;
  void set_speed_target(double value);

  // @@protoc_insertion_point(class_scope:controller.ControlCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::controller::SimpleMPCDebug* debug_;
  ::controller::LatencySts* latencysts_;
  double throttle_;
  double brake_;
  double steering_target_;
  double acceleration_target_;
  double speed_target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_control_5fcmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LatencySts

// double total_time_ms = 1;
inline void LatencySts::clear_total_time_ms() {
  total_time_ms_ = 0;
}
inline double LatencySts::total_time_ms() const {
  // @@protoc_insertion_point(field_get:controller.LatencySts.total_time_ms)
  return total_time_ms_;
}
inline void LatencySts::set_total_time_ms(double value) {
  
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:controller.LatencySts.total_time_ms)
}

// double controller_time_ms = 2;
inline void LatencySts::clear_controller_time_ms() {
  controller_time_ms_ = 0;
}
inline double LatencySts::controller_time_ms() const {
  // @@protoc_insertion_point(field_get:controller.LatencySts.controller_time_ms)
  return controller_time_ms_;
}
inline void LatencySts::set_controller_time_ms(double value) {
  
  controller_time_ms_ = value;
  // @@protoc_insertion_point(field_set:controller.LatencySts.controller_time_ms)
}

// -------------------------------------------------------------------

// SimpleMPCDebug

// double lateral_error = 1;
inline void SimpleMPCDebug::clear_lateral_error() {
  lateral_error_ = 0;
}
inline double SimpleMPCDebug::lateral_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_error)
  return lateral_error_;
}
inline void SimpleMPCDebug::set_lateral_error(double value) {
  
  lateral_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_error)
}

// double ref_heading = 2;
inline void SimpleMPCDebug::clear_ref_heading() {
  ref_heading_ = 0;
}
inline double SimpleMPCDebug::ref_heading() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading)
  return ref_heading_;
}
inline void SimpleMPCDebug::set_ref_heading(double value) {
  
  ref_heading_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading)
}

// double heading = 3;
inline void SimpleMPCDebug::clear_heading() {
  heading_ = 0;
}
inline double SimpleMPCDebug::heading() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading)
  return heading_;
}
inline void SimpleMPCDebug::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading)
}

// double heading_error = 4;
inline void SimpleMPCDebug::clear_heading_error() {
  heading_error_ = 0;
}
inline double SimpleMPCDebug::heading_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error)
  return heading_error_;
}
inline void SimpleMPCDebug::set_heading_error(double value) {
  
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error)
}

// double heading_error_rate = 5;
inline void SimpleMPCDebug::clear_heading_error_rate() {
  heading_error_rate_ = 0;
}
inline double SimpleMPCDebug::heading_error_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error_rate)
  return heading_error_rate_;
}
inline void SimpleMPCDebug::set_heading_error_rate(double value) {
  
  heading_error_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error_rate)
}

// double lateral_error_rate = 6;
inline void SimpleMPCDebug::clear_lateral_error_rate() {
  lateral_error_rate_ = 0;
}
inline double SimpleMPCDebug::lateral_error_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_error_rate)
  return lateral_error_rate_;
}
inline void SimpleMPCDebug::set_lateral_error_rate(double value) {
  
  lateral_error_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_error_rate)
}

// double curvature = 7;
inline void SimpleMPCDebug::clear_curvature() {
  curvature_ = 0;
}
inline double SimpleMPCDebug::curvature() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.curvature)
  return curvature_;
}
inline void SimpleMPCDebug::set_curvature(double value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.curvature)
}

// double steer_angle = 8;
inline void SimpleMPCDebug::clear_steer_angle() {
  steer_angle_ = 0;
}
inline double SimpleMPCDebug::steer_angle() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle)
  return steer_angle_;
}
inline void SimpleMPCDebug::set_steer_angle(double value) {
  
  steer_angle_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle)
}

// double steer_angle_feedforward = 9;
inline void SimpleMPCDebug::clear_steer_angle_feedforward() {
  steer_angle_feedforward_ = 0;
}
inline double SimpleMPCDebug::steer_angle_feedforward() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_feedforward)
  return steer_angle_feedforward_;
}
inline void SimpleMPCDebug::set_steer_angle_feedforward(double value) {
  
  steer_angle_feedforward_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_feedforward)
}

// double steer_angle_lateral_contribution = 10;
inline void SimpleMPCDebug::clear_steer_angle_lateral_contribution() {
  steer_angle_lateral_contribution_ = 0;
}
inline double SimpleMPCDebug::steer_angle_lateral_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_lateral_contribution)
  return steer_angle_lateral_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_lateral_contribution(double value) {
  
  steer_angle_lateral_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_lateral_contribution)
}

// double steer_angle_lateral_rate_contribution = 11;
inline void SimpleMPCDebug::clear_steer_angle_lateral_rate_contribution() {
  steer_angle_lateral_rate_contribution_ = 0;
}
inline double SimpleMPCDebug::steer_angle_lateral_rate_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
  return steer_angle_lateral_rate_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_lateral_rate_contribution(double value) {
  
  steer_angle_lateral_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_lateral_rate_contribution)
}

// double steer_angle_heading_contribution = 12;
inline void SimpleMPCDebug::clear_steer_angle_heading_contribution() {
  steer_angle_heading_contribution_ = 0;
}
inline double SimpleMPCDebug::steer_angle_heading_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_heading_contribution)
  return steer_angle_heading_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_heading_contribution(double value) {
  
  steer_angle_heading_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_heading_contribution)
}

// double steer_angle_heading_rate_contribution = 13;
inline void SimpleMPCDebug::clear_steer_angle_heading_rate_contribution() {
  steer_angle_heading_rate_contribution_ = 0;
}
inline double SimpleMPCDebug::steer_angle_heading_rate_contribution() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_heading_rate_contribution)
  return steer_angle_heading_rate_contribution_;
}
inline void SimpleMPCDebug::set_steer_angle_heading_rate_contribution(double value) {
  
  steer_angle_heading_rate_contribution_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_heading_rate_contribution)
}

// double steer_angle_feedback = 14;
inline void SimpleMPCDebug::clear_steer_angle_feedback() {
  steer_angle_feedback_ = 0;
}
inline double SimpleMPCDebug::steer_angle_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_feedback)
  return steer_angle_feedback_;
}
inline void SimpleMPCDebug::set_steer_angle_feedback(double value) {
  
  steer_angle_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_feedback)
}

// double steering_position = 15;
inline void SimpleMPCDebug::clear_steering_position() {
  steering_position_ = 0;
}
inline double SimpleMPCDebug::steering_position() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steering_position)
  return steering_position_;
}
inline void SimpleMPCDebug::set_steering_position(double value) {
  
  steering_position_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steering_position)
}

// double ref_speed = 16;
inline void SimpleMPCDebug::clear_ref_speed() {
  ref_speed_ = 0;
}
inline double SimpleMPCDebug::ref_speed() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_speed)
  return ref_speed_;
}
inline void SimpleMPCDebug::set_ref_speed(double value) {
  
  ref_speed_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_speed)
}

// double steer_angle_limited = 17;
inline void SimpleMPCDebug::clear_steer_angle_limited() {
  steer_angle_limited_ = 0;
}
inline double SimpleMPCDebug::steer_angle_limited() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_limited)
  return steer_angle_limited_;
}
inline void SimpleMPCDebug::set_steer_angle_limited(double value) {
  
  steer_angle_limited_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_limited)
}

// double station_reference = 18;
inline void SimpleMPCDebug::clear_station_reference() {
  station_reference_ = 0;
}
inline double SimpleMPCDebug::station_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.station_reference)
  return station_reference_;
}
inline void SimpleMPCDebug::set_station_reference(double value) {
  
  station_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.station_reference)
}

// double station_error = 19;
inline void SimpleMPCDebug::clear_station_error() {
  station_error_ = 0;
}
inline double SimpleMPCDebug::station_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.station_error)
  return station_error_;
}
inline void SimpleMPCDebug::set_station_error(double value) {
  
  station_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.station_error)
}

// double speed_reference = 20;
inline void SimpleMPCDebug::clear_speed_reference() {
  speed_reference_ = 0;
}
inline double SimpleMPCDebug::speed_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_reference)
  return speed_reference_;
}
inline void SimpleMPCDebug::set_speed_reference(double value) {
  
  speed_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_reference)
}

// double speed_error = 21;
inline void SimpleMPCDebug::clear_speed_error() {
  speed_error_ = 0;
}
inline double SimpleMPCDebug::speed_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_error)
  return speed_error_;
}
inline void SimpleMPCDebug::set_speed_error(double value) {
  
  speed_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_error)
}

// double acceleration_reference = 22;
inline void SimpleMPCDebug::clear_acceleration_reference() {
  acceleration_reference_ = 0;
}
inline double SimpleMPCDebug::acceleration_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_reference)
  return acceleration_reference_;
}
inline void SimpleMPCDebug::set_acceleration_reference(double value) {
  
  acceleration_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_reference)
}

// bool is_full_stop = 23;
inline void SimpleMPCDebug::clear_is_full_stop() {
  is_full_stop_ = false;
}
inline bool SimpleMPCDebug::is_full_stop() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.is_full_stop)
  return is_full_stop_;
}
inline void SimpleMPCDebug::set_is_full_stop(bool value) {
  
  is_full_stop_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.is_full_stop)
}

// double station_feedback = 24;
inline void SimpleMPCDebug::clear_station_feedback() {
  station_feedback_ = 0;
}
inline double SimpleMPCDebug::station_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.station_feedback)
  return station_feedback_;
}
inline void SimpleMPCDebug::set_station_feedback(double value) {
  
  station_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.station_feedback)
}

// double speed_feedback = 25;
inline void SimpleMPCDebug::clear_speed_feedback() {
  speed_feedback_ = 0;
}
inline double SimpleMPCDebug::speed_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_feedback)
  return speed_feedback_;
}
inline void SimpleMPCDebug::set_speed_feedback(double value) {
  
  speed_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_feedback)
}

// double acceleration_cmd_closeloop = 26;
inline void SimpleMPCDebug::clear_acceleration_cmd_closeloop() {
  acceleration_cmd_closeloop_ = 0;
}
inline double SimpleMPCDebug::acceleration_cmd_closeloop() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_cmd_closeloop)
  return acceleration_cmd_closeloop_;
}
inline void SimpleMPCDebug::set_acceleration_cmd_closeloop(double value) {
  
  acceleration_cmd_closeloop_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_cmd_closeloop)
}

// double acceleration_cmd = 27;
inline void SimpleMPCDebug::clear_acceleration_cmd() {
  acceleration_cmd_ = 0;
}
inline double SimpleMPCDebug::acceleration_cmd() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_cmd)
  return acceleration_cmd_;
}
inline void SimpleMPCDebug::set_acceleration_cmd(double value) {
  
  acceleration_cmd_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_cmd)
}

// double acceleration_lookup = 28;
inline void SimpleMPCDebug::clear_acceleration_lookup() {
  acceleration_lookup_ = 0;
}
inline double SimpleMPCDebug::acceleration_lookup() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_lookup)
  return acceleration_lookup_;
}
inline void SimpleMPCDebug::set_acceleration_lookup(double value) {
  
  acceleration_lookup_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_lookup)
}

// double speed_lookup = 29;
inline void SimpleMPCDebug::clear_speed_lookup() {
  speed_lookup_ = 0;
}
inline double SimpleMPCDebug::speed_lookup() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.speed_lookup)
  return speed_lookup_;
}
inline void SimpleMPCDebug::set_speed_lookup(double value) {
  
  speed_lookup_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.speed_lookup)
}

// double calibration_value = 30;
inline void SimpleMPCDebug::clear_calibration_value() {
  calibration_value_ = 0;
}
inline double SimpleMPCDebug::calibration_value() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.calibration_value)
  return calibration_value_;
}
inline void SimpleMPCDebug::set_calibration_value(double value) {
  
  calibration_value_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.calibration_value)
}

// double steer_unconstrained_control_diff = 31;
inline void SimpleMPCDebug::clear_steer_unconstrained_control_diff() {
  steer_unconstrained_control_diff_ = 0;
}
inline double SimpleMPCDebug::steer_unconstrained_control_diff() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_unconstrained_control_diff)
  return steer_unconstrained_control_diff_;
}
inline void SimpleMPCDebug::set_steer_unconstrained_control_diff(double value) {
  
  steer_unconstrained_control_diff_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_unconstrained_control_diff)
}

// double steer_angle_feedforward_compensation = 32;
inline void SimpleMPCDebug::clear_steer_angle_feedforward_compensation() {
  steer_angle_feedforward_compensation_ = 0;
}
inline double SimpleMPCDebug::steer_angle_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.steer_angle_feedforward_compensation)
  return steer_angle_feedforward_compensation_;
}
inline void SimpleMPCDebug::set_steer_angle_feedforward_compensation(double value) {
  
  steer_angle_feedforward_compensation_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.steer_angle_feedforward_compensation)
}

// double matrix_q_updated = 33;
inline void SimpleMPCDebug::clear_matrix_q_updated() {
  matrix_q_updated_ = 0;
}
inline double SimpleMPCDebug::matrix_q_updated() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.matrix_q_updated)
  return matrix_q_updated_;
}
inline void SimpleMPCDebug::set_matrix_q_updated(double value) {
  
  matrix_q_updated_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.matrix_q_updated)
}

// double matrix_r_updated = 34;
inline void SimpleMPCDebug::clear_matrix_r_updated() {
  matrix_r_updated_ = 0;
}
inline double SimpleMPCDebug::matrix_r_updated() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.matrix_r_updated)
  return matrix_r_updated_;
}
inline void SimpleMPCDebug::set_matrix_r_updated(double value) {
  
  matrix_r_updated_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.matrix_r_updated)
}

// double lateral_acceleration = 35;
inline void SimpleMPCDebug::clear_lateral_acceleration() {
  lateral_acceleration_ = 0;
}
inline double SimpleMPCDebug::lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_acceleration)
  return lateral_acceleration_;
}
inline void SimpleMPCDebug::set_lateral_acceleration(double value) {
  
  lateral_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_acceleration)
}

// double lateral_jerk = 36;
inline void SimpleMPCDebug::clear_lateral_jerk() {
  lateral_jerk_ = 0;
}
inline double SimpleMPCDebug::lateral_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.lateral_jerk)
  return lateral_jerk_;
}
inline void SimpleMPCDebug::set_lateral_jerk(double value) {
  
  lateral_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.lateral_jerk)
}

// double ref_heading_rate = 37;
inline void SimpleMPCDebug::clear_ref_heading_rate() {
  ref_heading_rate_ = 0;
}
inline double SimpleMPCDebug::ref_heading_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading_rate)
  return ref_heading_rate_;
}
inline void SimpleMPCDebug::set_ref_heading_rate(double value) {
  
  ref_heading_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading_rate)
}

// double heading_rate = 38;
inline void SimpleMPCDebug::clear_heading_rate() {
  heading_rate_ = 0;
}
inline double SimpleMPCDebug::heading_rate() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_rate)
  return heading_rate_;
}
inline void SimpleMPCDebug::set_heading_rate(double value) {
  
  heading_rate_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_rate)
}

// double ref_heading_acceleration = 39;
inline void SimpleMPCDebug::clear_ref_heading_acceleration() {
  ref_heading_acceleration_ = 0;
}
inline double SimpleMPCDebug::ref_heading_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading_acceleration)
  return ref_heading_acceleration_;
}
inline void SimpleMPCDebug::set_ref_heading_acceleration(double value) {
  
  ref_heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading_acceleration)
}

// double heading_acceleration = 40;
inline void SimpleMPCDebug::clear_heading_acceleration() {
  heading_acceleration_ = 0;
}
inline double SimpleMPCDebug::heading_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_acceleration)
  return heading_acceleration_;
}
inline void SimpleMPCDebug::set_heading_acceleration(double value) {
  
  heading_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_acceleration)
}

// double heading_error_acceleration = 41;
inline void SimpleMPCDebug::clear_heading_error_acceleration() {
  heading_error_acceleration_ = 0;
}
inline double SimpleMPCDebug::heading_error_acceleration() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error_acceleration)
  return heading_error_acceleration_;
}
inline void SimpleMPCDebug::set_heading_error_acceleration(double value) {
  
  heading_error_acceleration_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error_acceleration)
}

// double ref_heading_jerk = 42;
inline void SimpleMPCDebug::clear_ref_heading_jerk() {
  ref_heading_jerk_ = 0;
}
inline double SimpleMPCDebug::ref_heading_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.ref_heading_jerk)
  return ref_heading_jerk_;
}
inline void SimpleMPCDebug::set_ref_heading_jerk(double value) {
  
  ref_heading_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.ref_heading_jerk)
}

// double heading_jerk = 43;
inline void SimpleMPCDebug::clear_heading_jerk() {
  heading_jerk_ = 0;
}
inline double SimpleMPCDebug::heading_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_jerk)
  return heading_jerk_;
}
inline void SimpleMPCDebug::set_heading_jerk(double value) {
  
  heading_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_jerk)
}

// double heading_error_jerk = 44;
inline void SimpleMPCDebug::clear_heading_error_jerk() {
  heading_error_jerk_ = 0;
}
inline double SimpleMPCDebug::heading_error_jerk() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.heading_error_jerk)
  return heading_error_jerk_;
}
inline void SimpleMPCDebug::set_heading_error_jerk(double value) {
  
  heading_error_jerk_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.heading_error_jerk)
}

// double acceleration_feedback = 45;
inline void SimpleMPCDebug::clear_acceleration_feedback() {
  acceleration_feedback_ = 0;
}
inline double SimpleMPCDebug::acceleration_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_feedback)
  return acceleration_feedback_;
}
inline void SimpleMPCDebug::set_acceleration_feedback(double value) {
  
  acceleration_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_feedback)
}

// double acceleration_error = 46;
inline void SimpleMPCDebug::clear_acceleration_error() {
  acceleration_error_ = 0;
}
inline double SimpleMPCDebug::acceleration_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.acceleration_error)
  return acceleration_error_;
}
inline void SimpleMPCDebug::set_acceleration_error(double value) {
  
  acceleration_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.acceleration_error)
}

// double jerk_reference = 47;
inline void SimpleMPCDebug::clear_jerk_reference() {
  jerk_reference_ = 0;
}
inline double SimpleMPCDebug::jerk_reference() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.jerk_reference)
  return jerk_reference_;
}
inline void SimpleMPCDebug::set_jerk_reference(double value) {
  
  jerk_reference_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.jerk_reference)
}

// double jerk_feedback = 48;
inline void SimpleMPCDebug::clear_jerk_feedback() {
  jerk_feedback_ = 0;
}
inline double SimpleMPCDebug::jerk_feedback() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.jerk_feedback)
  return jerk_feedback_;
}
inline void SimpleMPCDebug::set_jerk_feedback(double value) {
  
  jerk_feedback_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.jerk_feedback)
}

// double jerk_error = 49;
inline void SimpleMPCDebug::clear_jerk_error() {
  jerk_error_ = 0;
}
inline double SimpleMPCDebug::jerk_error() const {
  // @@protoc_insertion_point(field_get:controller.SimpleMPCDebug.jerk_error)
  return jerk_error_;
}
inline void SimpleMPCDebug::set_jerk_error(double value) {
  
  jerk_error_ = value;
  // @@protoc_insertion_point(field_set:controller.SimpleMPCDebug.jerk_error)
}

// -------------------------------------------------------------------

// ControlCommand

// double throttle = 1;
inline void ControlCommand::clear_throttle() {
  throttle_ = 0;
}
inline double ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.throttle)
  return throttle_;
}
inline void ControlCommand::set_throttle(double value) {
  
  throttle_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.throttle)
}

// double brake = 2;
inline void ControlCommand::clear_brake() {
  brake_ = 0;
}
inline double ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.brake)
  return brake_;
}
inline void ControlCommand::set_brake(double value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.brake)
}

// double steering_target = 3;
inline void ControlCommand::clear_steering_target() {
  steering_target_ = 0;
}
inline double ControlCommand::steering_target() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.steering_target)
  return steering_target_;
}
inline void ControlCommand::set_steering_target(double value) {
  
  steering_target_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.steering_target)
}

// double acceleration_target = 4;
inline void ControlCommand::clear_acceleration_target() {
  acceleration_target_ = 0;
}
inline double ControlCommand::acceleration_target() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.acceleration_target)
  return acceleration_target_;
}
inline void ControlCommand::set_acceleration_target(double value) {
  
  acceleration_target_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.acceleration_target)
}

// double speed_target = 5;
inline void ControlCommand::clear_speed_target() {
  speed_target_ = 0;
}
inline double ControlCommand::speed_target() const {
  // @@protoc_insertion_point(field_get:controller.ControlCommand.speed_target)
  return speed_target_;
}
inline void ControlCommand::set_speed_target(double value) {
  
  speed_target_ = value;
  // @@protoc_insertion_point(field_set:controller.ControlCommand.speed_target)
}

// .controller.SimpleMPCDebug debug = 6;
inline bool ControlCommand::has_debug() const {
  return this != internal_default_instance() && debug_ != NULL;
}
inline void ControlCommand::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) {
    delete debug_;
  }
  debug_ = NULL;
}
inline const ::controller::SimpleMPCDebug& ControlCommand::_internal_debug() const {
  return *debug_;
}
inline const ::controller::SimpleMPCDebug& ControlCommand::debug() const {
  const ::controller::SimpleMPCDebug* p = debug_;
  // @@protoc_insertion_point(field_get:controller.ControlCommand.debug)
  return p != NULL ? *p : *reinterpret_cast<const ::controller::SimpleMPCDebug*>(
      &::controller::_SimpleMPCDebug_default_instance_);
}
inline ::controller::SimpleMPCDebug* ControlCommand::release_debug() {
  // @@protoc_insertion_point(field_release:controller.ControlCommand.debug)
  
  ::controller::SimpleMPCDebug* temp = debug_;
  debug_ = NULL;
  return temp;
}
inline ::controller::SimpleMPCDebug* ControlCommand::mutable_debug() {
  
  if (debug_ == NULL) {
    auto* p = CreateMaybeMessage<::controller::SimpleMPCDebug>(GetArenaNoVirtual());
    debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlCommand.debug)
  return debug_;
}
inline void ControlCommand::set_allocated_debug(::controller::SimpleMPCDebug* debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_;
  }
  if (debug) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlCommand.debug)
}

// .controller.LatencySts latencysts = 7;
inline bool ControlCommand::has_latencysts() const {
  return this != internal_default_instance() && latencysts_ != NULL;
}
inline void ControlCommand::clear_latencysts() {
  if (GetArenaNoVirtual() == NULL && latencysts_ != NULL) {
    delete latencysts_;
  }
  latencysts_ = NULL;
}
inline const ::controller::LatencySts& ControlCommand::_internal_latencysts() const {
  return *latencysts_;
}
inline const ::controller::LatencySts& ControlCommand::latencysts() const {
  const ::controller::LatencySts* p = latencysts_;
  // @@protoc_insertion_point(field_get:controller.ControlCommand.latencysts)
  return p != NULL ? *p : *reinterpret_cast<const ::controller::LatencySts*>(
      &::controller::_LatencySts_default_instance_);
}
inline ::controller::LatencySts* ControlCommand::release_latencysts() {
  // @@protoc_insertion_point(field_release:controller.ControlCommand.latencysts)
  
  ::controller::LatencySts* temp = latencysts_;
  latencysts_ = NULL;
  return temp;
}
inline ::controller::LatencySts* ControlCommand::mutable_latencysts() {
  
  if (latencysts_ == NULL) {
    auto* p = CreateMaybeMessage<::controller::LatencySts>(GetArenaNoVirtual());
    latencysts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:controller.ControlCommand.latencysts)
  return latencysts_;
}
inline void ControlCommand::set_allocated_latencysts(::controller::LatencySts* latencysts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete latencysts_;
  }
  if (latencysts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latencysts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latencysts, submessage_arena);
    }
    
  } else {
    
  }
  latencysts_ = latencysts;
  // @@protoc_insertion_point(field_set_allocated:controller.ControlCommand.latencysts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_control_5fcmd_2eproto
