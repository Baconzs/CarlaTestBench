// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/chassis.proto

#include "control/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
}  // namespace protobuf_common_2fgeometry_2eproto
namespace protobuf_common_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fheader_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_common_2fheader_2eproto
namespace protobuf_common_2fwheel_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fwheel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_wheel;
}  // namespace protobuf_common_2fwheel_2eproto
namespace chassis {
class ESPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ESP>
      _instance;
} _ESP_default_instance_;
class EPSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EPS>
      _instance;
} _EPS_default_instance_;
class PowertrainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Powertrain>
      _instance;
} _Powertrain_default_instance_;
}  // namespace chassis
namespace protobuf_control_2fchassis_2eproto {
static void InitDefaultsESP() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chassis::_ESP_default_instance_;
    new (ptr) ::chassis::ESP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chassis::ESP::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ESP =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsESP}, {
      &protobuf_common_2fheader_2eproto::scc_info_Header.base,
      &protobuf_common_2fgeometry_2eproto::scc_info_Point3D.base,
      &protobuf_common_2fwheel_2eproto::scc_info_wheel.base,}};

static void InitDefaultsEPS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chassis::_EPS_default_instance_;
    new (ptr) ::chassis::EPS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chassis::EPS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EPS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEPS}, {
      &protobuf_common_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsPowertrain() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chassis::_Powertrain_default_instance_;
    new (ptr) ::chassis::Powertrain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chassis::Powertrain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Powertrain =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPowertrain}, {
      &protobuf_common_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ESP.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EPS.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Powertrain.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, hand_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, mass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, drag_coefficient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, center_of_mass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, wheel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::ESP, speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::EPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::EPS, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::EPS, steer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, manual_gear_shift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, max_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, moi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, damping_rate_full_throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, damping_rate_zero_throttle_clutch_engaged_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, damping_rate_zero_throttle_clutch_disengaged_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, use_gear_autobox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, gear_switch_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chassis::Powertrain, clutch_strength_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chassis::ESP)},
  { 13, -1, sizeof(::chassis::EPS)},
  { 20, -1, sizeof(::chassis::Powertrain)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chassis::_ESP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chassis::_EPS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chassis::_Powertrain_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "control/chassis.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025control/chassis.proto\022\007chassis\032\023common"
      "/header.proto\032\025common/geometry.proto\032\022co"
      "mmon/wheel.proto\"\306\001\n\003ESP\022\036\n\006header\030\001 \001(\013"
      "2\016.common.Header\022\r\n\005brake\030\002 \001(\002\022\022\n\nhand_"
      "brake\030\003 \001(\010\022\014\n\004mass\030\004 \001(\002\022\030\n\020drag_coeffi"
      "cient\030\005 \001(\002\022\'\n\016center_of_mass\030\006 \001(\0132\017.co"
      "mmon.Point3D\022\034\n\005wheel\030\007 \003(\0132\r.common.whe"
      "el\022\r\n\005speed\030\010 \001(\002\"4\n\003EPS\022\036\n\006header\030\001 \001(\013"
      "2\016.common.Header\022\r\n\005steer\030\002 \001(\002\"\337\002\n\nPowe"
      "rtrain\022\036\n\006header\030\001 \001(\0132\016.common.Header\022\020"
      "\n\010throttle\030\002 \001(\002\022\014\n\004gear\030\003 \001(\005\022\031\n\021manual"
      "_gear_shift\030\004 \001(\010\022\017\n\007max_rpm\030\005 \001(\002\022\013\n\003mo"
      "i\030\006 \001(\002\022\"\n\032damping_rate_full_throttle\030\007 "
      "\001(\002\0221\n)damping_rate_zero_throttle_clutch"
      "_engaged\030\010 \001(\002\0224\n,damping_rate_zero_thro"
      "ttle_clutch_disengaged\030\t \001(\002\022\030\n\020use_gear"
      "_autobox\030\n \001(\010\022\030\n\020gear_switch_time\030\013 \001(\002"
      "\022\027\n\017clutch_strength\030\014 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control/chassis.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2fheader_2eproto::AddDescriptors();
  ::protobuf_common_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_common_2fwheel_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_control_2fchassis_2eproto
namespace chassis {

// ===================================================================

void ESP::InitAsDefaultInstance() {
  ::chassis::_ESP_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
  ::chassis::_ESP_default_instance_._instance.get_mutable()->center_of_mass_ = const_cast< ::common::Point3D*>(
      ::common::Point3D::internal_default_instance());
}
void ESP::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ESP::clear_center_of_mass() {
  if (GetArenaNoVirtual() == NULL && center_of_mass_ != NULL) {
    delete center_of_mass_;
  }
  center_of_mass_ = NULL;
}
void ESP::clear_wheel() {
  wheel_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ESP::kHeaderFieldNumber;
const int ESP::kBrakeFieldNumber;
const int ESP::kHandBrakeFieldNumber;
const int ESP::kMassFieldNumber;
const int ESP::kDragCoefficientFieldNumber;
const int ESP::kCenterOfMassFieldNumber;
const int ESP::kWheelFieldNumber;
const int ESP::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ESP::ESP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2fchassis_2eproto::scc_info_ESP.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chassis.ESP)
}
ESP::ESP(const ESP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      wheel_(from.wheel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_center_of_mass()) {
    center_of_mass_ = new ::common::Point3D(*from.center_of_mass_);
  } else {
    center_of_mass_ = NULL;
  }
  ::memcpy(&brake_, &from.brake_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&brake_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:chassis.ESP)
}

void ESP::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&header_)) + sizeof(speed_));
}

ESP::~ESP() {
  // @@protoc_insertion_point(destructor:chassis.ESP)
  SharedDtor();
}

void ESP::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete center_of_mass_;
}

void ESP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ESP::descriptor() {
  ::protobuf_control_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ESP& ESP::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2fchassis_2eproto::scc_info_ESP.base);
  return *internal_default_instance();
}


void ESP::Clear() {
// @@protoc_insertion_point(message_clear_start:chassis.ESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && center_of_mass_ != NULL) {
    delete center_of_mass_;
  }
  center_of_mass_ = NULL;
  ::memset(&brake_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&brake_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool ESP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chassis.ESP)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brake = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hand_brake = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hand_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mass = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float drag_coefficient = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drag_coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Point3D center_of_mass = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center_of_mass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.wheel wheel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wheel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chassis.ESP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chassis.ESP)
  return false;
#undef DO_
}

void ESP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chassis.ESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // float brake = 2;
  if (this->brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->brake(), output);
  }

  // bool hand_brake = 3;
  if (this->hand_brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hand_brake(), output);
  }

  // float mass = 4;
  if (this->mass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mass(), output);
  }

  // float drag_coefficient = 5;
  if (this->drag_coefficient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->drag_coefficient(), output);
  }

  // .common.Point3D center_of_mass = 6;
  if (this->has_center_of_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_center_of_mass(), output);
  }

  // repeated .common.wheel wheel = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->wheel(static_cast<int>(i)),
      output);
  }

  // float speed = 8;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chassis.ESP)
}

::google::protobuf::uint8* ESP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chassis.ESP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // float brake = 2;
  if (this->brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->brake(), target);
  }

  // bool hand_brake = 3;
  if (this->hand_brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hand_brake(), target);
  }

  // float mass = 4;
  if (this->mass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->mass(), target);
  }

  // float drag_coefficient = 5;
  if (this->drag_coefficient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->drag_coefficient(), target);
  }

  // .common.Point3D center_of_mass = 6;
  if (this->has_center_of_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_center_of_mass(), deterministic, target);
  }

  // repeated .common.wheel wheel = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->wheel(static_cast<int>(i)), deterministic, target);
  }

  // float speed = 8;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chassis.ESP)
  return target;
}

size_t ESP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chassis.ESP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.wheel wheel = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->wheel_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wheel(static_cast<int>(i)));
    }
  }

  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .common.Point3D center_of_mass = 6;
  if (this->has_center_of_mass()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_of_mass_);
  }

  // float brake = 2;
  if (this->brake() != 0) {
    total_size += 1 + 4;
  }

  // bool hand_brake = 3;
  if (this->hand_brake() != 0) {
    total_size += 1 + 1;
  }

  // float mass = 4;
  if (this->mass() != 0) {
    total_size += 1 + 4;
  }

  // float drag_coefficient = 5;
  if (this->drag_coefficient() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 8;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chassis.ESP)
  GOOGLE_DCHECK_NE(&from, this);
  const ESP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ESP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chassis.ESP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chassis.ESP)
    MergeFrom(*source);
  }
}

void ESP::MergeFrom(const ESP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chassis.ESP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_.MergeFrom(from.wheel_);
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.has_center_of_mass()) {
    mutable_center_of_mass()->::common::Point3D::MergeFrom(from.center_of_mass());
  }
  if (from.brake() != 0) {
    set_brake(from.brake());
  }
  if (from.hand_brake() != 0) {
    set_hand_brake(from.hand_brake());
  }
  if (from.mass() != 0) {
    set_mass(from.mass());
  }
  if (from.drag_coefficient() != 0) {
    set_drag_coefficient(from.drag_coefficient());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void ESP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chassis.ESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESP::CopyFrom(const ESP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chassis.ESP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESP::IsInitialized() const {
  return true;
}

void ESP::Swap(ESP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ESP::InternalSwap(ESP* other) {
  using std::swap;
  CastToBase(&wheel_)->InternalSwap(CastToBase(&other->wheel_));
  swap(header_, other->header_);
  swap(center_of_mass_, other->center_of_mass_);
  swap(brake_, other->brake_);
  swap(hand_brake_, other->hand_brake_);
  swap(mass_, other->mass_);
  swap(drag_coefficient_, other->drag_coefficient_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ESP::GetMetadata() const {
  protobuf_control_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EPS::InitAsDefaultInstance() {
  ::chassis::_EPS_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
}
void EPS::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EPS::kHeaderFieldNumber;
const int EPS::kSteerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EPS::EPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2fchassis_2eproto::scc_info_EPS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chassis.EPS)
}
EPS::EPS(const EPS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  steer_ = from.steer_;
  // @@protoc_insertion_point(copy_constructor:chassis.EPS)
}

void EPS::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&header_)) + sizeof(steer_));
}

EPS::~EPS() {
  // @@protoc_insertion_point(destructor:chassis.EPS)
  SharedDtor();
}

void EPS::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void EPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EPS::descriptor() {
  ::protobuf_control_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EPS& EPS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2fchassis_2eproto::scc_info_EPS.base);
  return *internal_default_instance();
}


void EPS::Clear() {
// @@protoc_insertion_point(message_clear_start:chassis.EPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  steer_ = 0;
  _internal_metadata_.Clear();
}

bool EPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chassis.EPS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chassis.EPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chassis.EPS)
  return false;
#undef DO_
}

void EPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chassis.EPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // float steer = 2;
  if (this->steer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->steer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chassis.EPS)
}

::google::protobuf::uint8* EPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chassis.EPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // float steer = 2;
  if (this->steer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->steer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chassis.EPS)
  return target;
}

size_t EPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chassis.EPS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float steer = 2;
  if (this->steer() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chassis.EPS)
  GOOGLE_DCHECK_NE(&from, this);
  const EPS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chassis.EPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chassis.EPS)
    MergeFrom(*source);
  }
}

void EPS::MergeFrom(const EPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chassis.EPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.steer() != 0) {
    set_steer(from.steer());
  }
}

void EPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chassis.EPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EPS::CopyFrom(const EPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chassis.EPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EPS::IsInitialized() const {
  return true;
}

void EPS::Swap(EPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EPS::InternalSwap(EPS* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(steer_, other->steer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EPS::GetMetadata() const {
  protobuf_control_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Powertrain::InitAsDefaultInstance() {
  ::chassis::_Powertrain_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
}
void Powertrain::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Powertrain::kHeaderFieldNumber;
const int Powertrain::kThrottleFieldNumber;
const int Powertrain::kGearFieldNumber;
const int Powertrain::kManualGearShiftFieldNumber;
const int Powertrain::kMaxRpmFieldNumber;
const int Powertrain::kMoiFieldNumber;
const int Powertrain::kDampingRateFullThrottleFieldNumber;
const int Powertrain::kDampingRateZeroThrottleClutchEngagedFieldNumber;
const int Powertrain::kDampingRateZeroThrottleClutchDisengagedFieldNumber;
const int Powertrain::kUseGearAutoboxFieldNumber;
const int Powertrain::kGearSwitchTimeFieldNumber;
const int Powertrain::kClutchStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Powertrain::Powertrain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2fchassis_2eproto::scc_info_Powertrain.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chassis.Powertrain)
}
Powertrain::Powertrain(const Powertrain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&clutch_strength_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(clutch_strength_));
  // @@protoc_insertion_point(copy_constructor:chassis.Powertrain)
}

void Powertrain::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clutch_strength_) -
      reinterpret_cast<char*>(&header_)) + sizeof(clutch_strength_));
}

Powertrain::~Powertrain() {
  // @@protoc_insertion_point(destructor:chassis.Powertrain)
  SharedDtor();
}

void Powertrain::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Powertrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Powertrain::descriptor() {
  ::protobuf_control_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Powertrain& Powertrain::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2fchassis_2eproto::scc_info_Powertrain.base);
  return *internal_default_instance();
}


void Powertrain::Clear() {
// @@protoc_insertion_point(message_clear_start:chassis.Powertrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&throttle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clutch_strength_) -
      reinterpret_cast<char*>(&throttle_)) + sizeof(clutch_strength_));
  _internal_metadata_.Clear();
}

bool Powertrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chassis.Powertrain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float throttle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gear = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool manual_gear_shift = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_gear_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_rpm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float moi = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &moi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float damping_rate_full_throttle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damping_rate_full_throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float damping_rate_zero_throttle_clutch_engaged = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damping_rate_zero_throttle_clutch_engaged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float damping_rate_zero_throttle_clutch_disengaged = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damping_rate_zero_throttle_clutch_disengaged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_gear_autobox = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_gear_autobox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gear_switch_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gear_switch_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float clutch_strength = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clutch_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chassis.Powertrain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chassis.Powertrain)
  return false;
#undef DO_
}

void Powertrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chassis.Powertrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // float throttle = 2;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->throttle(), output);
  }

  // int32 gear = 3;
  if (this->gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gear(), output);
  }

  // bool manual_gear_shift = 4;
  if (this->manual_gear_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->manual_gear_shift(), output);
  }

  // float max_rpm = 5;
  if (this->max_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_rpm(), output);
  }

  // float moi = 6;
  if (this->moi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->moi(), output);
  }

  // float damping_rate_full_throttle = 7;
  if (this->damping_rate_full_throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->damping_rate_full_throttle(), output);
  }

  // float damping_rate_zero_throttle_clutch_engaged = 8;
  if (this->damping_rate_zero_throttle_clutch_engaged() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->damping_rate_zero_throttle_clutch_engaged(), output);
  }

  // float damping_rate_zero_throttle_clutch_disengaged = 9;
  if (this->damping_rate_zero_throttle_clutch_disengaged() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->damping_rate_zero_throttle_clutch_disengaged(), output);
  }

  // bool use_gear_autobox = 10;
  if (this->use_gear_autobox() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_gear_autobox(), output);
  }

  // float gear_switch_time = 11;
  if (this->gear_switch_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->gear_switch_time(), output);
  }

  // float clutch_strength = 12;
  if (this->clutch_strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->clutch_strength(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chassis.Powertrain)
}

::google::protobuf::uint8* Powertrain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chassis.Powertrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // float throttle = 2;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->throttle(), target);
  }

  // int32 gear = 3;
  if (this->gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gear(), target);
  }

  // bool manual_gear_shift = 4;
  if (this->manual_gear_shift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->manual_gear_shift(), target);
  }

  // float max_rpm = 5;
  if (this->max_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_rpm(), target);
  }

  // float moi = 6;
  if (this->moi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->moi(), target);
  }

  // float damping_rate_full_throttle = 7;
  if (this->damping_rate_full_throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->damping_rate_full_throttle(), target);
  }

  // float damping_rate_zero_throttle_clutch_engaged = 8;
  if (this->damping_rate_zero_throttle_clutch_engaged() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->damping_rate_zero_throttle_clutch_engaged(), target);
  }

  // float damping_rate_zero_throttle_clutch_disengaged = 9;
  if (this->damping_rate_zero_throttle_clutch_disengaged() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->damping_rate_zero_throttle_clutch_disengaged(), target);
  }

  // bool use_gear_autobox = 10;
  if (this->use_gear_autobox() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_gear_autobox(), target);
  }

  // float gear_switch_time = 11;
  if (this->gear_switch_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->gear_switch_time(), target);
  }

  // float clutch_strength = 12;
  if (this->clutch_strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->clutch_strength(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chassis.Powertrain)
  return target;
}

size_t Powertrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chassis.Powertrain)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float throttle = 2;
  if (this->throttle() != 0) {
    total_size += 1 + 4;
  }

  // int32 gear = 3;
  if (this->gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gear());
  }

  // float max_rpm = 5;
  if (this->max_rpm() != 0) {
    total_size += 1 + 4;
  }

  // float moi = 6;
  if (this->moi() != 0) {
    total_size += 1 + 4;
  }

  // float damping_rate_full_throttle = 7;
  if (this->damping_rate_full_throttle() != 0) {
    total_size += 1 + 4;
  }

  // bool manual_gear_shift = 4;
  if (this->manual_gear_shift() != 0) {
    total_size += 1 + 1;
  }

  // bool use_gear_autobox = 10;
  if (this->use_gear_autobox() != 0) {
    total_size += 1 + 1;
  }

  // float damping_rate_zero_throttle_clutch_engaged = 8;
  if (this->damping_rate_zero_throttle_clutch_engaged() != 0) {
    total_size += 1 + 4;
  }

  // float damping_rate_zero_throttle_clutch_disengaged = 9;
  if (this->damping_rate_zero_throttle_clutch_disengaged() != 0) {
    total_size += 1 + 4;
  }

  // float gear_switch_time = 11;
  if (this->gear_switch_time() != 0) {
    total_size += 1 + 4;
  }

  // float clutch_strength = 12;
  if (this->clutch_strength() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Powertrain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chassis.Powertrain)
  GOOGLE_DCHECK_NE(&from, this);
  const Powertrain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Powertrain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chassis.Powertrain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chassis.Powertrain)
    MergeFrom(*source);
  }
}

void Powertrain::MergeFrom(const Powertrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chassis.Powertrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
  if (from.max_rpm() != 0) {
    set_max_rpm(from.max_rpm());
  }
  if (from.moi() != 0) {
    set_moi(from.moi());
  }
  if (from.damping_rate_full_throttle() != 0) {
    set_damping_rate_full_throttle(from.damping_rate_full_throttle());
  }
  if (from.manual_gear_shift() != 0) {
    set_manual_gear_shift(from.manual_gear_shift());
  }
  if (from.use_gear_autobox() != 0) {
    set_use_gear_autobox(from.use_gear_autobox());
  }
  if (from.damping_rate_zero_throttle_clutch_engaged() != 0) {
    set_damping_rate_zero_throttle_clutch_engaged(from.damping_rate_zero_throttle_clutch_engaged());
  }
  if (from.damping_rate_zero_throttle_clutch_disengaged() != 0) {
    set_damping_rate_zero_throttle_clutch_disengaged(from.damping_rate_zero_throttle_clutch_disengaged());
  }
  if (from.gear_switch_time() != 0) {
    set_gear_switch_time(from.gear_switch_time());
  }
  if (from.clutch_strength() != 0) {
    set_clutch_strength(from.clutch_strength());
  }
}

void Powertrain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chassis.Powertrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Powertrain::CopyFrom(const Powertrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chassis.Powertrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Powertrain::IsInitialized() const {
  return true;
}

void Powertrain::Swap(Powertrain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Powertrain::InternalSwap(Powertrain* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(throttle_, other->throttle_);
  swap(gear_, other->gear_);
  swap(max_rpm_, other->max_rpm_);
  swap(moi_, other->moi_);
  swap(damping_rate_full_throttle_, other->damping_rate_full_throttle_);
  swap(manual_gear_shift_, other->manual_gear_shift_);
  swap(use_gear_autobox_, other->use_gear_autobox_);
  swap(damping_rate_zero_throttle_clutch_engaged_, other->damping_rate_zero_throttle_clutch_engaged_);
  swap(damping_rate_zero_throttle_clutch_disengaged_, other->damping_rate_zero_throttle_clutch_disengaged_);
  swap(gear_switch_time_, other->gear_switch_time_);
  swap(clutch_strength_, other->clutch_strength_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Powertrain::GetMetadata() const {
  protobuf_control_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chassis
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chassis::ESP* Arena::CreateMaybeMessage< ::chassis::ESP >(Arena* arena) {
  return Arena::CreateInternal< ::chassis::ESP >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chassis::EPS* Arena::CreateMaybeMessage< ::chassis::EPS >(Arena* arena) {
  return Arena::CreateInternal< ::chassis::EPS >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chassis::Powertrain* Arena::CreateMaybeMessage< ::chassis::Powertrain >(Arena* arena) {
  return Arena::CreateInternal< ::chassis::Powertrain >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
