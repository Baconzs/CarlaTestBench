// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/control_cmd.proto

#include "control/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fheader_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_common_2fheader_2eproto
namespace protobuf_control_2fcontrol_5fcmd_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_control_2fcontrol_5fcmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatencySts;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_control_2fcontrol_5fcmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimpleMPCDebug;
}  // namespace protobuf_control_2fcontrol_5fcmd_2eproto
namespace controller {
class LatencyStsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencySts>
      _instance;
} _LatencySts_default_instance_;
class SimpleMPCDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimpleMPCDebug>
      _instance;
} _SimpleMPCDebug_default_instance_;
class ControlCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlCommand>
      _instance;
} _ControlCommand_default_instance_;
}  // namespace controller
namespace protobuf_control_2fcontrol_5fcmd_2eproto {
static void InitDefaultsLatencySts() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_LatencySts_default_instance_;
    new (ptr) ::controller::LatencySts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::LatencySts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatencySts =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatencySts}, {}};

static void InitDefaultsSimpleMPCDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_SimpleMPCDebug_default_instance_;
    new (ptr) ::controller::SimpleMPCDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::SimpleMPCDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimpleMPCDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimpleMPCDebug}, {}};

static void InitDefaultsControlCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::controller::_ControlCommand_default_instance_;
    new (ptr) ::controller::ControlCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::controller::ControlCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ControlCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsControlCommand}, {
      &protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_SimpleMPCDebug.base,
      &protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_LatencySts.base,
      &protobuf_common_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LatencySts.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimpleMPCDebug.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlCommand.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::LatencySts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::LatencySts, total_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::LatencySts, controller_time_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, lateral_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, ref_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, lateral_error_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_feedforward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_lateral_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_lateral_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_heading_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_heading_rate_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steering_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, ref_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_limited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, station_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, speed_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, acceleration_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, is_full_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, station_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, speed_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, acceleration_cmd_closeloop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, acceleration_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, acceleration_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, speed_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, calibration_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_unconstrained_control_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, steer_angle_feedforward_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, matrix_q_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, matrix_r_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, lateral_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, lateral_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, ref_heading_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, ref_heading_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_error_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, ref_heading_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, heading_error_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, acceleration_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, acceleration_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, jerk_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, jerk_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::SimpleMPCDebug, jerk_error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, steering_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, acceleration_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, speed_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, latencysts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::controller::ControlCommand, header_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::controller::LatencySts)},
  { 7, -1, sizeof(::controller::SimpleMPCDebug)},
  { 61, -1, sizeof(::controller::ControlCommand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_LatencySts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_SimpleMPCDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::controller::_ControlCommand_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "control/control_cmd.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031control/control_cmd.proto\022\ncontroller\032"
      "\023common/header.proto\"\?\n\nLatencySts\022\025\n\rto"
      "tal_time_ms\030\001 \001(\001\022\032\n\022controller_time_ms\030"
      "\002 \001(\001\"\362\n\n\016SimpleMPCDebug\022\025\n\rlateral_erro"
      "r\030\001 \001(\001\022\023\n\013ref_heading\030\002 \001(\001\022\017\n\007heading\030"
      "\003 \001(\001\022\025\n\rheading_error\030\004 \001(\001\022\032\n\022heading_"
      "error_rate\030\005 \001(\001\022\032\n\022lateral_error_rate\030\006"
      " \001(\001\022\021\n\tcurvature\030\007 \001(\001\022\023\n\013steer_angle\030\010"
      " \001(\001\022\037\n\027steer_angle_feedforward\030\t \001(\001\022(\n"
      " steer_angle_lateral_contribution\030\n \001(\001\022"
      "-\n%steer_angle_lateral_rate_contribution"
      "\030\013 \001(\001\022(\n steer_angle_heading_contributi"
      "on\030\014 \001(\001\022-\n%steer_angle_heading_rate_con"
      "tribution\030\r \001(\001\022\034\n\024steer_angle_feedback\030"
      "\016 \001(\001\022\031\n\021steering_position\030\017 \001(\001\022\021\n\tref_"
      "speed\030\020 \001(\001\022\033\n\023steer_angle_limited\030\021 \001(\001"
      "\022\031\n\021station_reference\030\022 \001(\001\022\025\n\rstation_e"
      "rror\030\023 \001(\001\022\027\n\017speed_reference\030\024 \001(\001\022\023\n\013s"
      "peed_error\030\025 \001(\001\022\036\n\026acceleration_referen"
      "ce\030\026 \001(\001\022\024\n\014is_full_stop\030\027 \001(\010\022\030\n\020statio"
      "n_feedback\030\030 \001(\001\022\026\n\016speed_feedback\030\031 \001(\001"
      "\022\"\n\032acceleration_cmd_closeloop\030\032 \001(\001\022\030\n\020"
      "acceleration_cmd\030\033 \001(\001\022\033\n\023acceleration_l"
      "ookup\030\034 \001(\001\022\024\n\014speed_lookup\030\035 \001(\001\022\031\n\021cal"
      "ibration_value\030\036 \001(\001\022(\n steer_unconstrai"
      "ned_control_diff\030\037 \001(\001\022,\n$steer_angle_fe"
      "edforward_compensation\030  \001(\001\022\030\n\020matrix_q"
      "_updated\030! \001(\001\022\030\n\020matrix_r_updated\030\" \001(\001"
      "\022\034\n\024lateral_acceleration\030# \001(\001\022\024\n\014latera"
      "l_jerk\030$ \001(\001\022\030\n\020ref_heading_rate\030% \001(\001\022\024"
      "\n\014heading_rate\030& \001(\001\022 \n\030ref_heading_acce"
      "leration\030\' \001(\001\022\034\n\024heading_acceleration\030("
      " \001(\001\022\"\n\032heading_error_acceleration\030) \001(\001"
      "\022\030\n\020ref_heading_jerk\030* \001(\001\022\024\n\014heading_je"
      "rk\030+ \001(\001\022\032\n\022heading_error_jerk\030, \001(\001\022\035\n\025"
      "acceleration_feedback\030- \001(\001\022\032\n\022accelerat"
      "ion_error\030. \001(\001\022\026\n\016jerk_reference\030/ \001(\001\022"
      "\025\n\rjerk_feedback\0300 \001(\001\022\022\n\njerk_error\0301 \001"
      "(\001\"\364\001\n\016ControlCommand\022\020\n\010throttle\030\001 \001(\001\022"
      "\r\n\005brake\030\002 \001(\001\022\027\n\017steering_target\030\003 \001(\001\022"
      "\033\n\023acceleration_target\030\004 \001(\001\022\024\n\014speed_ta"
      "rget\030\005 \001(\001\022)\n\005debug\030\006 \001(\0132\032.controller.S"
      "impleMPCDebug\022*\n\nlatencysts\030\007 \001(\0132\026.cont"
      "roller.LatencySts\022\036\n\006header\030\010 \001(\0132\016.comm"
      "on.Headerb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control/control_cmd.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_control_2fcontrol_5fcmd_2eproto
namespace controller {

// ===================================================================

void LatencySts::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencySts::kTotalTimeMsFieldNumber;
const int LatencySts::kControllerTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencySts::LatencySts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_LatencySts.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.LatencySts)
}
LatencySts::LatencySts(const LatencySts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(controller_time_ms_));
  // @@protoc_insertion_point(copy_constructor:controller.LatencySts)
}

void LatencySts::SharedCtor() {
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(controller_time_ms_));
}

LatencySts::~LatencySts() {
  // @@protoc_insertion_point(destructor:controller.LatencySts)
  SharedDtor();
}

void LatencySts::SharedDtor() {
}

void LatencySts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencySts::descriptor() {
  ::protobuf_control_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencySts& LatencySts::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_LatencySts.base);
  return *internal_default_instance();
}


void LatencySts::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.LatencySts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(controller_time_ms_));
  _internal_metadata_.Clear();
}

bool LatencySts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.LatencySts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double controller_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &controller_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.LatencySts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.LatencySts)
  return false;
#undef DO_
}

void LatencySts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.LatencySts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // double controller_time_ms = 2;
  if (this->controller_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->controller_time_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.LatencySts)
}

::google::protobuf::uint8* LatencySts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.LatencySts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // double controller_time_ms = 2;
  if (this->controller_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->controller_time_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.LatencySts)
  return target;
}

size_t LatencySts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.LatencySts)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double total_time_ms = 1;
  if (this->total_time_ms() != 0) {
    total_size += 1 + 8;
  }

  // double controller_time_ms = 2;
  if (this->controller_time_ms() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencySts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.LatencySts)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencySts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencySts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.LatencySts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.LatencySts)
    MergeFrom(*source);
  }
}

void LatencySts::MergeFrom(const LatencySts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.LatencySts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_time_ms() != 0) {
    set_total_time_ms(from.total_time_ms());
  }
  if (from.controller_time_ms() != 0) {
    set_controller_time_ms(from.controller_time_ms());
  }
}

void LatencySts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.LatencySts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencySts::CopyFrom(const LatencySts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.LatencySts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencySts::IsInitialized() const {
  return true;
}

void LatencySts::Swap(LatencySts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencySts::InternalSwap(LatencySts* other) {
  using std::swap;
  swap(total_time_ms_, other->total_time_ms_);
  swap(controller_time_ms_, other->controller_time_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencySts::GetMetadata() const {
  protobuf_control_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimpleMPCDebug::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleMPCDebug::kLateralErrorFieldNumber;
const int SimpleMPCDebug::kRefHeadingFieldNumber;
const int SimpleMPCDebug::kHeadingFieldNumber;
const int SimpleMPCDebug::kHeadingErrorFieldNumber;
const int SimpleMPCDebug::kHeadingErrorRateFieldNumber;
const int SimpleMPCDebug::kLateralErrorRateFieldNumber;
const int SimpleMPCDebug::kCurvatureFieldNumber;
const int SimpleMPCDebug::kSteerAngleFieldNumber;
const int SimpleMPCDebug::kSteerAngleFeedforwardFieldNumber;
const int SimpleMPCDebug::kSteerAngleLateralContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleLateralRateContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleHeadingContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleHeadingRateContributionFieldNumber;
const int SimpleMPCDebug::kSteerAngleFeedbackFieldNumber;
const int SimpleMPCDebug::kSteeringPositionFieldNumber;
const int SimpleMPCDebug::kRefSpeedFieldNumber;
const int SimpleMPCDebug::kSteerAngleLimitedFieldNumber;
const int SimpleMPCDebug::kStationReferenceFieldNumber;
const int SimpleMPCDebug::kStationErrorFieldNumber;
const int SimpleMPCDebug::kSpeedReferenceFieldNumber;
const int SimpleMPCDebug::kSpeedErrorFieldNumber;
const int SimpleMPCDebug::kAccelerationReferenceFieldNumber;
const int SimpleMPCDebug::kIsFullStopFieldNumber;
const int SimpleMPCDebug::kStationFeedbackFieldNumber;
const int SimpleMPCDebug::kSpeedFeedbackFieldNumber;
const int SimpleMPCDebug::kAccelerationCmdCloseloopFieldNumber;
const int SimpleMPCDebug::kAccelerationCmdFieldNumber;
const int SimpleMPCDebug::kAccelerationLookupFieldNumber;
const int SimpleMPCDebug::kSpeedLookupFieldNumber;
const int SimpleMPCDebug::kCalibrationValueFieldNumber;
const int SimpleMPCDebug::kSteerUnconstrainedControlDiffFieldNumber;
const int SimpleMPCDebug::kSteerAngleFeedforwardCompensationFieldNumber;
const int SimpleMPCDebug::kMatrixQUpdatedFieldNumber;
const int SimpleMPCDebug::kMatrixRUpdatedFieldNumber;
const int SimpleMPCDebug::kLateralAccelerationFieldNumber;
const int SimpleMPCDebug::kLateralJerkFieldNumber;
const int SimpleMPCDebug::kRefHeadingRateFieldNumber;
const int SimpleMPCDebug::kHeadingRateFieldNumber;
const int SimpleMPCDebug::kRefHeadingAccelerationFieldNumber;
const int SimpleMPCDebug::kHeadingAccelerationFieldNumber;
const int SimpleMPCDebug::kHeadingErrorAccelerationFieldNumber;
const int SimpleMPCDebug::kRefHeadingJerkFieldNumber;
const int SimpleMPCDebug::kHeadingJerkFieldNumber;
const int SimpleMPCDebug::kHeadingErrorJerkFieldNumber;
const int SimpleMPCDebug::kAccelerationFeedbackFieldNumber;
const int SimpleMPCDebug::kAccelerationErrorFieldNumber;
const int SimpleMPCDebug::kJerkReferenceFieldNumber;
const int SimpleMPCDebug::kJerkFeedbackFieldNumber;
const int SimpleMPCDebug::kJerkErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleMPCDebug::SimpleMPCDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_SimpleMPCDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.SimpleMPCDebug)
}
SimpleMPCDebug::SimpleMPCDebug(const SimpleMPCDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:controller.SimpleMPCDebug)
}

void SimpleMPCDebug::SharedCtor() {
  ::memset(&lateral_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
}

SimpleMPCDebug::~SimpleMPCDebug() {
  // @@protoc_insertion_point(destructor:controller.SimpleMPCDebug)
  SharedDtor();
}

void SimpleMPCDebug::SharedDtor() {
}

void SimpleMPCDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimpleMPCDebug::descriptor() {
  ::protobuf_control_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleMPCDebug& SimpleMPCDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_SimpleMPCDebug.base);
  return *internal_default_instance();
}


void SimpleMPCDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.SimpleMPCDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lateral_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
  _internal_metadata_.Clear();
}

bool SimpleMPCDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.SimpleMPCDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lateral_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_error_rate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_error_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double curvature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_feedforward = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedforward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_lateral_contribution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_lateral_rate_contribution = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_lateral_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_heading_contribution = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_heading_rate_contribution = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_heading_rate_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_feedback = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_position = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_speed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_limited = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_reference = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_error = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_reference = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_error = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_reference = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_full_stop = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_full_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_feedback = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_feedback = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_cmd_closeloop = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_closeloop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_cmd = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_lookup = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_lookup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_lookup = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_lookup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double calibration_value = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &calibration_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_unconstrained_control_diff = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_unconstrained_control_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_feedforward_compensation = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_feedforward_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double matrix_q_updated = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matrix_q_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double matrix_r_updated = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matrix_r_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_acceleration = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_jerk = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_heading_rate = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_rate = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_heading_acceleration = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_acceleration = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_error_acceleration = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_heading_jerk = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_heading_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_jerk = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 345 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_error_jerk = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 353 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_feedback = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 361 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_error = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 369 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double jerk_reference = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 377 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double jerk_feedback = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 385 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double jerk_error = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 393 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.SimpleMPCDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.SimpleMPCDebug)
  return false;
#undef DO_
}

void SimpleMPCDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.SimpleMPCDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lateral_error = 1;
  if (this->lateral_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_error(), output);
  }

  // double ref_heading = 2;
  if (this->ref_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ref_heading(), output);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // double heading_error = 4;
  if (this->heading_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  // double heading_error_rate = 5;
  if (this->heading_error_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_error_rate(), output);
  }

  // double lateral_error_rate = 6;
  if (this->lateral_error_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lateral_error_rate(), output);
  }

  // double curvature = 7;
  if (this->curvature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curvature(), output);
  }

  // double steer_angle = 8;
  if (this->steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->steer_angle(), output);
  }

  // double steer_angle_feedforward = 9;
  if (this->steer_angle_feedforward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_feedforward(), output);
  }

  // double steer_angle_lateral_contribution = 10;
  if (this->steer_angle_lateral_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->steer_angle_lateral_contribution(), output);
  }

  // double steer_angle_lateral_rate_contribution = 11;
  if (this->steer_angle_lateral_rate_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->steer_angle_lateral_rate_contribution(), output);
  }

  // double steer_angle_heading_contribution = 12;
  if (this->steer_angle_heading_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steer_angle_heading_contribution(), output);
  }

  // double steer_angle_heading_rate_contribution = 13;
  if (this->steer_angle_heading_rate_contribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->steer_angle_heading_rate_contribution(), output);
  }

  // double steer_angle_feedback = 14;
  if (this->steer_angle_feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->steer_angle_feedback(), output);
  }

  // double steering_position = 15;
  if (this->steering_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->steering_position(), output);
  }

  // double ref_speed = 16;
  if (this->ref_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ref_speed(), output);
  }

  // double steer_angle_limited = 17;
  if (this->steer_angle_limited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->steer_angle_limited(), output);
  }

  // double station_reference = 18;
  if (this->station_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->station_reference(), output);
  }

  // double station_error = 19;
  if (this->station_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->station_error(), output);
  }

  // double speed_reference = 20;
  if (this->speed_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->speed_reference(), output);
  }

  // double speed_error = 21;
  if (this->speed_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->speed_error(), output);
  }

  // double acceleration_reference = 22;
  if (this->acceleration_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->acceleration_reference(), output);
  }

  // bool is_full_stop = 23;
  if (this->is_full_stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_full_stop(), output);
  }

  // double station_feedback = 24;
  if (this->station_feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->station_feedback(), output);
  }

  // double speed_feedback = 25;
  if (this->speed_feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->speed_feedback(), output);
  }

  // double acceleration_cmd_closeloop = 26;
  if (this->acceleration_cmd_closeloop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->acceleration_cmd_closeloop(), output);
  }

  // double acceleration_cmd = 27;
  if (this->acceleration_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->acceleration_cmd(), output);
  }

  // double acceleration_lookup = 28;
  if (this->acceleration_lookup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->acceleration_lookup(), output);
  }

  // double speed_lookup = 29;
  if (this->speed_lookup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->speed_lookup(), output);
  }

  // double calibration_value = 30;
  if (this->calibration_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->calibration_value(), output);
  }

  // double steer_unconstrained_control_diff = 31;
  if (this->steer_unconstrained_control_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->steer_unconstrained_control_diff(), output);
  }

  // double steer_angle_feedforward_compensation = 32;
  if (this->steer_angle_feedforward_compensation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->steer_angle_feedforward_compensation(), output);
  }

  // double matrix_q_updated = 33;
  if (this->matrix_q_updated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->matrix_q_updated(), output);
  }

  // double matrix_r_updated = 34;
  if (this->matrix_r_updated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->matrix_r_updated(), output);
  }

  // double lateral_acceleration = 35;
  if (this->lateral_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->lateral_acceleration(), output);
  }

  // double lateral_jerk = 36;
  if (this->lateral_jerk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->lateral_jerk(), output);
  }

  // double ref_heading_rate = 37;
  if (this->ref_heading_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->ref_heading_rate(), output);
  }

  // double heading_rate = 38;
  if (this->heading_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->heading_rate(), output);
  }

  // double ref_heading_acceleration = 39;
  if (this->ref_heading_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->ref_heading_acceleration(), output);
  }

  // double heading_acceleration = 40;
  if (this->heading_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->heading_acceleration(), output);
  }

  // double heading_error_acceleration = 41;
  if (this->heading_error_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->heading_error_acceleration(), output);
  }

  // double ref_heading_jerk = 42;
  if (this->ref_heading_jerk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->ref_heading_jerk(), output);
  }

  // double heading_jerk = 43;
  if (this->heading_jerk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->heading_jerk(), output);
  }

  // double heading_error_jerk = 44;
  if (this->heading_error_jerk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->heading_error_jerk(), output);
  }

  // double acceleration_feedback = 45;
  if (this->acceleration_feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->acceleration_feedback(), output);
  }

  // double acceleration_error = 46;
  if (this->acceleration_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->acceleration_error(), output);
  }

  // double jerk_reference = 47;
  if (this->jerk_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->jerk_reference(), output);
  }

  // double jerk_feedback = 48;
  if (this->jerk_feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->jerk_feedback(), output);
  }

  // double jerk_error = 49;
  if (this->jerk_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(49, this->jerk_error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.SimpleMPCDebug)
}

::google::protobuf::uint8* SimpleMPCDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.SimpleMPCDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lateral_error = 1;
  if (this->lateral_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_error(), target);
  }

  // double ref_heading = 2;
  if (this->ref_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_heading(), target);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // double heading_error = 4;
  if (this->heading_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  // double heading_error_rate = 5;
  if (this->heading_error_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_error_rate(), target);
  }

  // double lateral_error_rate = 6;
  if (this->lateral_error_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lateral_error_rate(), target);
  }

  // double curvature = 7;
  if (this->curvature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curvature(), target);
  }

  // double steer_angle = 8;
  if (this->steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->steer_angle(), target);
  }

  // double steer_angle_feedforward = 9;
  if (this->steer_angle_feedforward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_feedforward(), target);
  }

  // double steer_angle_lateral_contribution = 10;
  if (this->steer_angle_lateral_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->steer_angle_lateral_contribution(), target);
  }

  // double steer_angle_lateral_rate_contribution = 11;
  if (this->steer_angle_lateral_rate_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->steer_angle_lateral_rate_contribution(), target);
  }

  // double steer_angle_heading_contribution = 12;
  if (this->steer_angle_heading_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steer_angle_heading_contribution(), target);
  }

  // double steer_angle_heading_rate_contribution = 13;
  if (this->steer_angle_heading_rate_contribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->steer_angle_heading_rate_contribution(), target);
  }

  // double steer_angle_feedback = 14;
  if (this->steer_angle_feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->steer_angle_feedback(), target);
  }

  // double steering_position = 15;
  if (this->steering_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->steering_position(), target);
  }

  // double ref_speed = 16;
  if (this->ref_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->ref_speed(), target);
  }

  // double steer_angle_limited = 17;
  if (this->steer_angle_limited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->steer_angle_limited(), target);
  }

  // double station_reference = 18;
  if (this->station_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->station_reference(), target);
  }

  // double station_error = 19;
  if (this->station_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->station_error(), target);
  }

  // double speed_reference = 20;
  if (this->speed_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->speed_reference(), target);
  }

  // double speed_error = 21;
  if (this->speed_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->speed_error(), target);
  }

  // double acceleration_reference = 22;
  if (this->acceleration_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->acceleration_reference(), target);
  }

  // bool is_full_stop = 23;
  if (this->is_full_stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_full_stop(), target);
  }

  // double station_feedback = 24;
  if (this->station_feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->station_feedback(), target);
  }

  // double speed_feedback = 25;
  if (this->speed_feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->speed_feedback(), target);
  }

  // double acceleration_cmd_closeloop = 26;
  if (this->acceleration_cmd_closeloop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->acceleration_cmd_closeloop(), target);
  }

  // double acceleration_cmd = 27;
  if (this->acceleration_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->acceleration_cmd(), target);
  }

  // double acceleration_lookup = 28;
  if (this->acceleration_lookup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->acceleration_lookup(), target);
  }

  // double speed_lookup = 29;
  if (this->speed_lookup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->speed_lookup(), target);
  }

  // double calibration_value = 30;
  if (this->calibration_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->calibration_value(), target);
  }

  // double steer_unconstrained_control_diff = 31;
  if (this->steer_unconstrained_control_diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->steer_unconstrained_control_diff(), target);
  }

  // double steer_angle_feedforward_compensation = 32;
  if (this->steer_angle_feedforward_compensation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->steer_angle_feedforward_compensation(), target);
  }

  // double matrix_q_updated = 33;
  if (this->matrix_q_updated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->matrix_q_updated(), target);
  }

  // double matrix_r_updated = 34;
  if (this->matrix_r_updated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->matrix_r_updated(), target);
  }

  // double lateral_acceleration = 35;
  if (this->lateral_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->lateral_acceleration(), target);
  }

  // double lateral_jerk = 36;
  if (this->lateral_jerk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->lateral_jerk(), target);
  }

  // double ref_heading_rate = 37;
  if (this->ref_heading_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->ref_heading_rate(), target);
  }

  // double heading_rate = 38;
  if (this->heading_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->heading_rate(), target);
  }

  // double ref_heading_acceleration = 39;
  if (this->ref_heading_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->ref_heading_acceleration(), target);
  }

  // double heading_acceleration = 40;
  if (this->heading_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->heading_acceleration(), target);
  }

  // double heading_error_acceleration = 41;
  if (this->heading_error_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->heading_error_acceleration(), target);
  }

  // double ref_heading_jerk = 42;
  if (this->ref_heading_jerk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->ref_heading_jerk(), target);
  }

  // double heading_jerk = 43;
  if (this->heading_jerk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->heading_jerk(), target);
  }

  // double heading_error_jerk = 44;
  if (this->heading_error_jerk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->heading_error_jerk(), target);
  }

  // double acceleration_feedback = 45;
  if (this->acceleration_feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->acceleration_feedback(), target);
  }

  // double acceleration_error = 46;
  if (this->acceleration_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->acceleration_error(), target);
  }

  // double jerk_reference = 47;
  if (this->jerk_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->jerk_reference(), target);
  }

  // double jerk_feedback = 48;
  if (this->jerk_feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->jerk_feedback(), target);
  }

  // double jerk_error = 49;
  if (this->jerk_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(49, this->jerk_error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.SimpleMPCDebug)
  return target;
}

size_t SimpleMPCDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.SimpleMPCDebug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double lateral_error = 1;
  if (this->lateral_error() != 0) {
    total_size += 1 + 8;
  }

  // double ref_heading = 2;
  if (this->ref_heading() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 3;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // double heading_error = 4;
  if (this->heading_error() != 0) {
    total_size += 1 + 8;
  }

  // double heading_error_rate = 5;
  if (this->heading_error_rate() != 0) {
    total_size += 1 + 8;
  }

  // double lateral_error_rate = 6;
  if (this->lateral_error_rate() != 0) {
    total_size += 1 + 8;
  }

  // double curvature = 7;
  if (this->curvature() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle = 8;
  if (this->steer_angle() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedforward = 9;
  if (this->steer_angle_feedforward() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_contribution = 10;
  if (this->steer_angle_lateral_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_rate_contribution = 11;
  if (this->steer_angle_lateral_rate_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_contribution = 12;
  if (this->steer_angle_heading_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_rate_contribution = 13;
  if (this->steer_angle_heading_rate_contribution() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedback = 14;
  if (this->steer_angle_feedback() != 0) {
    total_size += 1 + 8;
  }

  // double steering_position = 15;
  if (this->steering_position() != 0) {
    total_size += 1 + 8;
  }

  // double ref_speed = 16;
  if (this->ref_speed() != 0) {
    total_size += 2 + 8;
  }

  // double steer_angle_limited = 17;
  if (this->steer_angle_limited() != 0) {
    total_size += 2 + 8;
  }

  // double station_reference = 18;
  if (this->station_reference() != 0) {
    total_size += 2 + 8;
  }

  // double station_error = 19;
  if (this->station_error() != 0) {
    total_size += 2 + 8;
  }

  // double speed_reference = 20;
  if (this->speed_reference() != 0) {
    total_size += 2 + 8;
  }

  // double speed_error = 21;
  if (this->speed_error() != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_reference = 22;
  if (this->acceleration_reference() != 0) {
    total_size += 2 + 8;
  }

  // double station_feedback = 24;
  if (this->station_feedback() != 0) {
    total_size += 2 + 8;
  }

  // double speed_feedback = 25;
  if (this->speed_feedback() != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_cmd_closeloop = 26;
  if (this->acceleration_cmd_closeloop() != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_cmd = 27;
  if (this->acceleration_cmd() != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_lookup = 28;
  if (this->acceleration_lookup() != 0) {
    total_size += 2 + 8;
  }

  // double speed_lookup = 29;
  if (this->speed_lookup() != 0) {
    total_size += 2 + 8;
  }

  // double calibration_value = 30;
  if (this->calibration_value() != 0) {
    total_size += 2 + 8;
  }

  // double steer_unconstrained_control_diff = 31;
  if (this->steer_unconstrained_control_diff() != 0) {
    total_size += 2 + 8;
  }

  // double steer_angle_feedforward_compensation = 32;
  if (this->steer_angle_feedforward_compensation() != 0) {
    total_size += 2 + 8;
  }

  // double matrix_q_updated = 33;
  if (this->matrix_q_updated() != 0) {
    total_size += 2 + 8;
  }

  // double matrix_r_updated = 34;
  if (this->matrix_r_updated() != 0) {
    total_size += 2 + 8;
  }

  // double lateral_acceleration = 35;
  if (this->lateral_acceleration() != 0) {
    total_size += 2 + 8;
  }

  // double lateral_jerk = 36;
  if (this->lateral_jerk() != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_rate = 37;
  if (this->ref_heading_rate() != 0) {
    total_size += 2 + 8;
  }

  // double heading_rate = 38;
  if (this->heading_rate() != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_acceleration = 39;
  if (this->ref_heading_acceleration() != 0) {
    total_size += 2 + 8;
  }

  // double heading_acceleration = 40;
  if (this->heading_acceleration() != 0) {
    total_size += 2 + 8;
  }

  // double heading_error_acceleration = 41;
  if (this->heading_error_acceleration() != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_jerk = 42;
  if (this->ref_heading_jerk() != 0) {
    total_size += 2 + 8;
  }

  // double heading_jerk = 43;
  if (this->heading_jerk() != 0) {
    total_size += 2 + 8;
  }

  // double heading_error_jerk = 44;
  if (this->heading_error_jerk() != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_feedback = 45;
  if (this->acceleration_feedback() != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_error = 46;
  if (this->acceleration_error() != 0) {
    total_size += 2 + 8;
  }

  // double jerk_reference = 47;
  if (this->jerk_reference() != 0) {
    total_size += 2 + 8;
  }

  // double jerk_feedback = 48;
  if (this->jerk_feedback() != 0) {
    total_size += 2 + 8;
  }

  // double jerk_error = 49;
  if (this->jerk_error() != 0) {
    total_size += 2 + 8;
  }

  // bool is_full_stop = 23;
  if (this->is_full_stop() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleMPCDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleMPCDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleMPCDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.SimpleMPCDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.SimpleMPCDebug)
    MergeFrom(*source);
  }
}

void SimpleMPCDebug::MergeFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lateral_error() != 0) {
    set_lateral_error(from.lateral_error());
  }
  if (from.ref_heading() != 0) {
    set_ref_heading(from.ref_heading());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.heading_error() != 0) {
    set_heading_error(from.heading_error());
  }
  if (from.heading_error_rate() != 0) {
    set_heading_error_rate(from.heading_error_rate());
  }
  if (from.lateral_error_rate() != 0) {
    set_lateral_error_rate(from.lateral_error_rate());
  }
  if (from.curvature() != 0) {
    set_curvature(from.curvature());
  }
  if (from.steer_angle() != 0) {
    set_steer_angle(from.steer_angle());
  }
  if (from.steer_angle_feedforward() != 0) {
    set_steer_angle_feedforward(from.steer_angle_feedforward());
  }
  if (from.steer_angle_lateral_contribution() != 0) {
    set_steer_angle_lateral_contribution(from.steer_angle_lateral_contribution());
  }
  if (from.steer_angle_lateral_rate_contribution() != 0) {
    set_steer_angle_lateral_rate_contribution(from.steer_angle_lateral_rate_contribution());
  }
  if (from.steer_angle_heading_contribution() != 0) {
    set_steer_angle_heading_contribution(from.steer_angle_heading_contribution());
  }
  if (from.steer_angle_heading_rate_contribution() != 0) {
    set_steer_angle_heading_rate_contribution(from.steer_angle_heading_rate_contribution());
  }
  if (from.steer_angle_feedback() != 0) {
    set_steer_angle_feedback(from.steer_angle_feedback());
  }
  if (from.steering_position() != 0) {
    set_steering_position(from.steering_position());
  }
  if (from.ref_speed() != 0) {
    set_ref_speed(from.ref_speed());
  }
  if (from.steer_angle_limited() != 0) {
    set_steer_angle_limited(from.steer_angle_limited());
  }
  if (from.station_reference() != 0) {
    set_station_reference(from.station_reference());
  }
  if (from.station_error() != 0) {
    set_station_error(from.station_error());
  }
  if (from.speed_reference() != 0) {
    set_speed_reference(from.speed_reference());
  }
  if (from.speed_error() != 0) {
    set_speed_error(from.speed_error());
  }
  if (from.acceleration_reference() != 0) {
    set_acceleration_reference(from.acceleration_reference());
  }
  if (from.station_feedback() != 0) {
    set_station_feedback(from.station_feedback());
  }
  if (from.speed_feedback() != 0) {
    set_speed_feedback(from.speed_feedback());
  }
  if (from.acceleration_cmd_closeloop() != 0) {
    set_acceleration_cmd_closeloop(from.acceleration_cmd_closeloop());
  }
  if (from.acceleration_cmd() != 0) {
    set_acceleration_cmd(from.acceleration_cmd());
  }
  if (from.acceleration_lookup() != 0) {
    set_acceleration_lookup(from.acceleration_lookup());
  }
  if (from.speed_lookup() != 0) {
    set_speed_lookup(from.speed_lookup());
  }
  if (from.calibration_value() != 0) {
    set_calibration_value(from.calibration_value());
  }
  if (from.steer_unconstrained_control_diff() != 0) {
    set_steer_unconstrained_control_diff(from.steer_unconstrained_control_diff());
  }
  if (from.steer_angle_feedforward_compensation() != 0) {
    set_steer_angle_feedforward_compensation(from.steer_angle_feedforward_compensation());
  }
  if (from.matrix_q_updated() != 0) {
    set_matrix_q_updated(from.matrix_q_updated());
  }
  if (from.matrix_r_updated() != 0) {
    set_matrix_r_updated(from.matrix_r_updated());
  }
  if (from.lateral_acceleration() != 0) {
    set_lateral_acceleration(from.lateral_acceleration());
  }
  if (from.lateral_jerk() != 0) {
    set_lateral_jerk(from.lateral_jerk());
  }
  if (from.ref_heading_rate() != 0) {
    set_ref_heading_rate(from.ref_heading_rate());
  }
  if (from.heading_rate() != 0) {
    set_heading_rate(from.heading_rate());
  }
  if (from.ref_heading_acceleration() != 0) {
    set_ref_heading_acceleration(from.ref_heading_acceleration());
  }
  if (from.heading_acceleration() != 0) {
    set_heading_acceleration(from.heading_acceleration());
  }
  if (from.heading_error_acceleration() != 0) {
    set_heading_error_acceleration(from.heading_error_acceleration());
  }
  if (from.ref_heading_jerk() != 0) {
    set_ref_heading_jerk(from.ref_heading_jerk());
  }
  if (from.heading_jerk() != 0) {
    set_heading_jerk(from.heading_jerk());
  }
  if (from.heading_error_jerk() != 0) {
    set_heading_error_jerk(from.heading_error_jerk());
  }
  if (from.acceleration_feedback() != 0) {
    set_acceleration_feedback(from.acceleration_feedback());
  }
  if (from.acceleration_error() != 0) {
    set_acceleration_error(from.acceleration_error());
  }
  if (from.jerk_reference() != 0) {
    set_jerk_reference(from.jerk_reference());
  }
  if (from.jerk_feedback() != 0) {
    set_jerk_feedback(from.jerk_feedback());
  }
  if (from.jerk_error() != 0) {
    set_jerk_error(from.jerk_error());
  }
  if (from.is_full_stop() != 0) {
    set_is_full_stop(from.is_full_stop());
  }
}

void SimpleMPCDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMPCDebug::CopyFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCDebug::IsInitialized() const {
  return true;
}

void SimpleMPCDebug::Swap(SimpleMPCDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleMPCDebug::InternalSwap(SimpleMPCDebug* other) {
  using std::swap;
  swap(lateral_error_, other->lateral_error_);
  swap(ref_heading_, other->ref_heading_);
  swap(heading_, other->heading_);
  swap(heading_error_, other->heading_error_);
  swap(heading_error_rate_, other->heading_error_rate_);
  swap(lateral_error_rate_, other->lateral_error_rate_);
  swap(curvature_, other->curvature_);
  swap(steer_angle_, other->steer_angle_);
  swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  swap(steer_angle_feedback_, other->steer_angle_feedback_);
  swap(steering_position_, other->steering_position_);
  swap(ref_speed_, other->ref_speed_);
  swap(steer_angle_limited_, other->steer_angle_limited_);
  swap(station_reference_, other->station_reference_);
  swap(station_error_, other->station_error_);
  swap(speed_reference_, other->speed_reference_);
  swap(speed_error_, other->speed_error_);
  swap(acceleration_reference_, other->acceleration_reference_);
  swap(station_feedback_, other->station_feedback_);
  swap(speed_feedback_, other->speed_feedback_);
  swap(acceleration_cmd_closeloop_, other->acceleration_cmd_closeloop_);
  swap(acceleration_cmd_, other->acceleration_cmd_);
  swap(acceleration_lookup_, other->acceleration_lookup_);
  swap(speed_lookup_, other->speed_lookup_);
  swap(calibration_value_, other->calibration_value_);
  swap(steer_unconstrained_control_diff_, other->steer_unconstrained_control_diff_);
  swap(steer_angle_feedforward_compensation_, other->steer_angle_feedforward_compensation_);
  swap(matrix_q_updated_, other->matrix_q_updated_);
  swap(matrix_r_updated_, other->matrix_r_updated_);
  swap(lateral_acceleration_, other->lateral_acceleration_);
  swap(lateral_jerk_, other->lateral_jerk_);
  swap(ref_heading_rate_, other->ref_heading_rate_);
  swap(heading_rate_, other->heading_rate_);
  swap(ref_heading_acceleration_, other->ref_heading_acceleration_);
  swap(heading_acceleration_, other->heading_acceleration_);
  swap(heading_error_acceleration_, other->heading_error_acceleration_);
  swap(ref_heading_jerk_, other->ref_heading_jerk_);
  swap(heading_jerk_, other->heading_jerk_);
  swap(heading_error_jerk_, other->heading_error_jerk_);
  swap(acceleration_feedback_, other->acceleration_feedback_);
  swap(acceleration_error_, other->acceleration_error_);
  swap(jerk_reference_, other->jerk_reference_);
  swap(jerk_feedback_, other->jerk_feedback_);
  swap(jerk_error_, other->jerk_error_);
  swap(is_full_stop_, other->is_full_stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimpleMPCDebug::GetMetadata() const {
  protobuf_control_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlCommand::InitAsDefaultInstance() {
  ::controller::_ControlCommand_default_instance_._instance.get_mutable()->debug_ = const_cast< ::controller::SimpleMPCDebug*>(
      ::controller::SimpleMPCDebug::internal_default_instance());
  ::controller::_ControlCommand_default_instance_._instance.get_mutable()->latencysts_ = const_cast< ::controller::LatencySts*>(
      ::controller::LatencySts::internal_default_instance());
  ::controller::_ControlCommand_default_instance_._instance.get_mutable()->header_ = const_cast< ::common::Header*>(
      ::common::Header::internal_default_instance());
}
void ControlCommand::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCommand::kThrottleFieldNumber;
const int ControlCommand::kBrakeFieldNumber;
const int ControlCommand::kSteeringTargetFieldNumber;
const int ControlCommand::kAccelerationTargetFieldNumber;
const int ControlCommand::kSpeedTargetFieldNumber;
const int ControlCommand::kDebugFieldNumber;
const int ControlCommand::kLatencystsFieldNumber;
const int ControlCommand::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCommand::ControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_ControlCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_debug()) {
    debug_ = new ::controller::SimpleMPCDebug(*from.debug_);
  } else {
    debug_ = NULL;
  }
  if (from.has_latencysts()) {
    latencysts_ = new ::controller::LatencySts(*from.latencysts_);
  } else {
    latencysts_ = NULL;
  }
  if (from.has_header()) {
    header_ = new ::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_target_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(speed_target_));
  // @@protoc_insertion_point(copy_constructor:controller.ControlCommand)
}

void ControlCommand::SharedCtor() {
  ::memset(&debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_target_) -
      reinterpret_cast<char*>(&debug_)) + sizeof(speed_target_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:controller.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete latencysts_;
  if (this != internal_default_instance()) delete header_;
}

void ControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlCommand::descriptor() {
  ::protobuf_control_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlCommand& ControlCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_control_2fcontrol_5fcmd_2eproto::scc_info_ControlCommand.base);
  return *internal_default_instance();
}


void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && debug_ != NULL) {
    delete debug_;
  }
  debug_ = NULL;
  if (GetArenaNoVirtual() == NULL && latencysts_ != NULL) {
    delete latencysts_;
  }
  latencysts_ = NULL;
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&throttle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_target_) -
      reinterpret_cast<char*>(&throttle_)) + sizeof(speed_target_));
  _internal_metadata_.Clear();
}

bool ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.ControlCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double throttle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_target = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .controller.SimpleMPCDebug debug = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .controller.LatencySts latencysts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latencysts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.Header header = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.ControlCommand)
  return false;
#undef DO_
}

void ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double throttle = 1;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->throttle(), output);
  }

  // double brake = 2;
  if (this->brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brake(), output);
  }

  // double steering_target = 3;
  if (this->steering_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->steering_target(), output);
  }

  // double acceleration_target = 4;
  if (this->acceleration_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acceleration_target(), output);
  }

  // double speed_target = 5;
  if (this->speed_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed_target(), output);
  }

  // .controller.SimpleMPCDebug debug = 6;
  if (this->has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_debug(), output);
  }

  // .controller.LatencySts latencysts = 7;
  if (this->has_latencysts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_latencysts(), output);
  }

  // .common.Header header = 8;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_header(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:controller.ControlCommand)
}

::google::protobuf::uint8* ControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double throttle = 1;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->throttle(), target);
  }

  // double brake = 2;
  if (this->brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->brake(), target);
  }

  // double steering_target = 3;
  if (this->steering_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->steering_target(), target);
  }

  // double acceleration_target = 4;
  if (this->acceleration_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acceleration_target(), target);
  }

  // double speed_target = 5;
  if (this->speed_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed_target(), target);
  }

  // .controller.SimpleMPCDebug debug = 6;
  if (this->has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_debug(), deterministic, target);
  }

  // .controller.LatencySts latencysts = 7;
  if (this->has_latencysts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_latencysts(), deterministic, target);
  }

  // .common.Header header = 8;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_header(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:controller.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.ControlCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .controller.SimpleMPCDebug debug = 6;
  if (this->has_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *debug_);
  }

  // .controller.LatencySts latencysts = 7;
  if (this->has_latencysts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *latencysts_);
  }

  // .common.Header header = 8;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // double throttle = 1;
  if (this->throttle() != 0) {
    total_size += 1 + 8;
  }

  // double brake = 2;
  if (this->brake() != 0) {
    total_size += 1 + 8;
  }

  // double steering_target = 3;
  if (this->steering_target() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_target = 4;
  if (this->acceleration_target() != 0) {
    total_size += 1 + 8;
  }

  // double speed_target = 5;
  if (this->speed_target() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.ControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_debug()) {
    mutable_debug()->::controller::SimpleMPCDebug::MergeFrom(from.debug());
  }
  if (from.has_latencysts()) {
    mutable_latencysts()->::controller::LatencySts::MergeFrom(from.latencysts());
  }
  if (from.has_header()) {
    mutable_header()->::common::Header::MergeFrom(from.header());
  }
  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.brake() != 0) {
    set_brake(from.brake());
  }
  if (from.steering_target() != 0) {
    set_steering_target(from.steering_target());
  }
  if (from.acceleration_target() != 0) {
    set_acceleration_target(from.acceleration_target());
  }
  if (from.speed_target() != 0) {
    set_speed_target(from.speed_target());
  }
}

void ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::Swap(ControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  swap(debug_, other->debug_);
  swap(latencysts_, other->latencysts_);
  swap(header_, other->header_);
  swap(throttle_, other->throttle_);
  swap(brake_, other->brake_);
  swap(steering_target_, other->steering_target_);
  swap(acceleration_target_, other->acceleration_target_);
  swap(speed_target_, other->speed_target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlCommand::GetMetadata() const {
  protobuf_control_2fcontrol_5fcmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_control_2fcontrol_5fcmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace controller
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::controller::LatencySts* Arena::CreateMaybeMessage< ::controller::LatencySts >(Arena* arena) {
  return Arena::CreateInternal< ::controller::LatencySts >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::controller::SimpleMPCDebug* Arena::CreateMaybeMessage< ::controller::SimpleMPCDebug >(Arena* arena) {
  return Arena::CreateInternal< ::controller::SimpleMPCDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::controller::ControlCommand* Arena::CreateMaybeMessage< ::controller::ControlCommand >(Arena* arena) {
  return Arena::CreateInternal< ::controller::ControlCommand >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
